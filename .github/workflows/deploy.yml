name: Deploy VPN Server

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'update'
        type: choice
        options:
          - install
          - update
          - backup
          - restart
      target_server:
        description: 'Target server (staging/production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DEPLOY_DIR: /opt/v2ray
  BACKUP_DIR: /opt/v2ray-backup

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        SERVER_IP="${{ vars.STAGING_SERVER_IP }}"
        if [ "${{ github.event.inputs.target_server }}" = "production" ]; then
          SERVER_IP="${{ vars.PRODUCTION_SERVER_IP }}"
        fi
        ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        SERVER_IP="${{ vars.STAGING_SERVER_IP }}"
        SERVER_USER="${{ vars.STAGING_SERVER_USER }}"
        
        if [ "${{ github.event.inputs.target_server }}" = "production" ]; then
          SERVER_IP="${{ vars.PRODUCTION_SERVER_IP }}"
          SERVER_USER="${{ vars.PRODUCTION_SERVER_USER }}"
        fi
        
        ACTION="${{ github.event.inputs.action || 'update' }}"
        
        # Copy files to server
        rsync -avz --delete \
          --exclude='.git*' \
          --exclude='README.md' \
          --exclude='*.md' \
          ./ ${SERVER_USER}@${SERVER_IP}:/tmp/vpn-deploy/
        
        # Execute deployment
        ssh ${SERVER_USER}@${SERVER_IP} << 'EOF'
          set -e
          cd /tmp/vpn-deploy
          chmod +x *.sh
          
          # Run deployment script
          sudo ./deploy.sh ${{ github.event.inputs.action || 'update' }}
          
          # Cleanup
          rm -rf /tmp/vpn-deploy
        EOF

    - name: Verify deployment
      run: |
        SERVER_IP="${{ vars.STAGING_SERVER_IP }}"
        SERVER_USER="${{ vars.STAGING_SERVER_USER }}"
        
        if [ "${{ github.event.inputs.target_server }}" = "production" ]; then
          SERVER_IP="${{ vars.PRODUCTION_SERVER_IP }}"
          SERVER_USER="${{ vars.PRODUCTION_SERVER_USER }}"
        fi
        
        # Check service status
        ssh ${SERVER_USER}@${SERVER_IP} << 'EOF'
          echo "=== Service Status ==="
          sudo systemctl status vpn-watchdog.service --no-pager || true
          
          echo "=== Docker Containers ==="
          sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(xray|shadowbox|watchtower)" || echo "No VPN containers found"
          
          echo "=== Recent Logs ==="
          sudo tail -5 /var/log/vpn-watchdog.log 2>/dev/null || echo "No watchdog logs found"
        EOF

    - name: Notify deployment result
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment to ${{ github.event.inputs.target_server || 'staging' }} successful"
        else
          echo "❌ Deployment to ${{ github.event.inputs.target_server || 'staging' }} failed"
        fi