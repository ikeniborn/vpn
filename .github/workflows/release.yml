name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    name: Check Version and Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-edit for version management
      run: cargo install cargo-edit

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Bump version (manual trigger)
      if: github.event_name == 'workflow_dispatch'
      run: |
        cargo set-version --bump ${{ github.event.inputs.version_type }}
        NEW_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml crates/*/Cargo.toml
        git commit -m "chore: bump version to v$NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin rust
        git push origin "v$NEW_VERSION"

    - name: Extract version from tag
      if: github.event_name == 'push'
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION=$NEW_VERSION
        else
          VERSION=${{ steps.version.outputs.version }}
        fi
        
        # Generate changelog from git commits
        if git tag --sort=-version:refname | head -n 2 | tail -n 1 | grep -q .; then
          PREV_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-version
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-version.outputs.version || github.ref }}
        release_name: Release ${{ needs.check-version.outputs.version || github.ref }}
        body: |
          ## Changes in this Release
          
          ${{ needs.check-version.outputs.changelog }}
          
          ## Installation
          
          ### Using release archive (recommended)
          
          Download and extract the release archive:
          
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ needs.check-version.outputs.version || github.ref }}/vpn-release.tar.gz
          mkdir -p ~/vpn-install
          cd ~/vpn-install
          tar -xzf ~/vpn-release.tar.gz
          cd vpn-release
          sudo ./install.sh
          ```
          
          ### Using Docker
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.check-version.outputs.version || github.ref }}
          ```
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-release:
    name: Build Release Archive
    needs: [check-version, create-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: release-build
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 jq
    
    - name: Build release archive
      run: |
        chmod +x ./build-release.sh
        ./build-release.sh
    
    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release/vpn-release.tar.gz
        asset_name: vpn-release.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release/vpn-release.tar.gz.sha256
        asset_name: vpn-release.tar.gz.sha256
        asset_content_type: text/plain
        
    - name: Upload release info
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release/RELEASE_INFO.md
        asset_name: RELEASE_INFO.md
        asset_content_type: text/markdown

  docker-release:
    name: Build and Push Docker Images
    needs: [check-version, create-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/rust' }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-docs:
    name: Update Documentation
    needs: [check-version, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update installation documentation
      run: |
        VERSION=${{ needs.check-version.outputs.version || github.ref }}
        VERSION=${VERSION#refs/tags/}
        
        # Update README.md with new release version
        sed -i "s/vpn-release\.tar\.gz/vpn-release.tar.gz/g" README.md
        sed -i "s/releases\/download\/[^\/]*\//releases\/download\/$VERSION\//g" README.md
        
        # Update docs with new version
        find docs/ -name "*.md" -exec sed -i "s/releases\/download\/[^\/]*\//releases\/download\/$VERSION\//g" {} \;

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md docs/
        if git diff --cached --quiet; then
          echo "No documentation changes to commit"
        else
          git commit -m "docs: update installation instructions for ${{ needs.check-version.outputs.version || github.ref }}"
          git push origin rust
        fi