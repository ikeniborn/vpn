name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      target_version:
        description: 'Version to rollback to (leave empty for previous)'
        required: false
        type: string

jobs:
  rollback:
    name: Rollback ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for rollback

      - name: Determine rollback version
        id: version
        run: |
          if [ -n "${{ inputs.target_version }}" ]; then
            TARGET_VERSION="${{ inputs.target_version }}"
          else
            # Get the previous stable version
            TARGET_VERSION=$(git tag -l "v*" --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sed -n '2p')
          fi
          
          if [ -z "$TARGET_VERSION" ]; then
            echo "::error::Could not determine rollback version"
            exit 1
          fi
          
          echo "Rolling back to version: $TARGET_VERSION"
          echo "version=$TARGET_VERSION" >> $GITHUB_OUTPUT

      - name: Create rollback record
        run: |
          cat > rollback-record.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ inputs.environment }}",
            "reason": "${{ inputs.reason }}",
            "target_version": "${{ steps.version.outputs.version }}",
            "initiated_by": "${{ github.actor }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF

      - name: Backup current state
        run: |
          echo "Creating backup of current deployment state..."
          # This would normally backup current configs, data, etc.
          mkdir -p backups
          echo "Backup completed at $(date)" > backups/rollback-backup-${{ github.run_id }}.txt

      - name: Deploy previous version
        run: |
          echo "Deploying version ${{ steps.version.outputs.version }} to ${{ inputs.environment }}..."
          
          # This would normally trigger the deployment process
          # For example, updating container tags, helm charts, etc.
          
          # Simulate deployment
          sleep 5
          echo "Deployment completed"

      - name: Run smoke tests
        uses: ./.github/workflows/smoke-tests.yml
        with:
          environment: ${{ inputs.environment }}
          vpn_endpoint: ${{ vars.VPN_ENDPOINT }}

      - name: Notify team
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MESSAGE="Rollback to ${{ steps.version.outputs.version }} on ${{ inputs.environment }}: ${STATUS}"
          
          echo "::notice::$MESSAGE"
          
          # This would normally send notifications via Slack, email, etc.
          echo "$MESSAGE" >> rollback-notification.txt

      - name: Update rollback record
        if: always()
        run: |
          jq '. + {"status": "${{ job.status }}", "completed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' \
            rollback-record.json > rollback-record-final.json

      - name: Upload rollback artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: rollback-${{ inputs.environment }}-${{ github.run_id }}
          path: |
            rollback-record-final.json
            rollback-notification.txt
            backups/
          retention-days: 90