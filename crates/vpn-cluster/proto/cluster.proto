syntax = "proto3";

package cluster;

// Cluster communication service
service ClusterService {
    // Join cluster request
    rpc JoinCluster(JoinClusterRequest) returns (JoinClusterResponse);
    
    // Leave cluster notification
    rpc LeaveCluster(LeaveClusterRequest) returns (LeaveClusterResponse);
    
    // Heartbeat/ping
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    
    // Sync cluster state
    rpc SyncState(SyncStateRequest) returns (SyncStateResponse);
    
    // Forward message to leader
    rpc ForwardToLeader(ForwardMessage) returns (ForwardResponse);
    
    // Get cluster status
    rpc GetClusterStatus(StatusRequest) returns (StatusResponse);
}

// Node information
message NodeInfo {
    string node_id = 1;
    string name = 2;
    string address = 3;
    string role = 4;
    string status = 5;
    uint64 joined_at = 6;
    uint64 last_seen = 7;
    map<string, string> metadata = 8;
    string version = 9;
    string region = 10;
    NodeResources resources = 11;
}

// Node resources
message NodeResources {
    uint32 cpu_cores = 1;
    uint64 memory_mb = 2;
    uint64 disk_mb = 3;
    double cpu_usage = 4;
    double memory_usage = 5;
    double disk_usage = 6;
    uint64 network_bandwidth = 7;
}

// Join cluster request
message JoinClusterRequest {
    NodeInfo node_info = 1;
    string cluster_name = 2;
    uint64 timestamp = 3;
}

// Join cluster response
message JoinClusterResponse {
    bool success = 1;
    string message = 2;
    ClusterState cluster_state = 3;
}

// Leave cluster request
message LeaveClusterRequest {
    string node_id = 1;
    uint64 timestamp = 2;
}

// Leave cluster response
message LeaveClusterResponse {
    bool success = 1;
    string message = 2;
}

// Heartbeat request
message HeartbeatRequest {
    string node_id = 1;
    uint64 timestamp = 2;
    NodeResources resources = 3;
}

// Heartbeat response
message HeartbeatResponse {
    bool success = 1;
    uint64 server_time = 2;
    string leader_id = 3;
    uint64 term = 4;
}

// Sync state request
message SyncStateRequest {
    string node_id = 1;
    uint64 last_known_version = 2;
}

// Sync state response
message SyncStateResponse {
    bool success = 1;
    ClusterState cluster_state = 2;
}

// Forward message request
message ForwardMessage {
    string from_node_id = 1;
    string message_type = 2;
    bytes payload = 3;
    uint64 timestamp = 4;
}

// Forward response
message ForwardResponse {
    bool success = 1;
    string message = 2;
    bytes response_payload = 3;
}

// Status request
message StatusRequest {
    string node_id = 1;
}

// Status response
message StatusResponse {
    ClusterState cluster_state = 1;
    repeated NodeInfo nodes = 2;
    uint64 timestamp = 3;
}

// Cluster state
message ClusterState {
    string cluster_name = 1;
    repeated NodeInfo nodes = 2;
    string leader_id = 3;
    uint64 term = 4;
    uint64 config_version = 5;
    map<string, string> config_data = 6;
    uint64 last_updated = 7;
    uint64 created_at = 8;
    map<string, string> metadata = 9;
}

// Consensus messages
service ConsensusService {
    // Request vote (Raft)
    rpc RequestVote(VoteRequest) returns (VoteResponse);
    
    // Append entries (Raft)
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    
    // Install snapshot (Raft)
    rpc InstallSnapshot(SnapshotRequest) returns (SnapshotResponse);
}

// Vote request (Raft)
message VoteRequest {
    uint64 term = 1;
    string candidate_id = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

// Vote response (Raft)
message VoteResponse {
    uint64 term = 1;
    bool vote_granted = 2;
}

// Append entries request (Raft)
message AppendEntriesRequest {
    uint64 term = 1;
    string leader_id = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated LogEntry entries = 5;
    uint64 leader_commit = 6;
}

// Append entries response (Raft)
message AppendEntriesResponse {
    uint64 term = 1;
    bool success = 2;
}

// Log entry (Raft)
message LogEntry {
    uint64 term = 1;
    uint64 index = 2;
    bytes data = 3;
    uint64 timestamp = 4;
}

// Snapshot request (Raft)
message SnapshotRequest {
    uint64 term = 1;
    string leader_id = 2;
    uint64 last_included_index = 3;
    uint64 last_included_term = 4;
    bytes data = 5;
}

// Snapshot response (Raft)
message SnapshotResponse {
    uint64 term = 1;
    bool success = 2;
}