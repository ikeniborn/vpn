version: '3.8'

services:
  vpn-identity:
    image: vpn-identity:latest
    container_name: vpn-identity
    build:
      context: ../../
      dockerfile: docker/Dockerfile.identity
    environment:
      - DATABASE_URL=postgres://vpn:vpn@postgres-identity:5432/vpn_identity
      - REDIS_URL=redis://redis-identity:6379
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - RUST_LOG=info,vpn_identity=debug
    ports:
      - "8080:8080"
    depends_on:
      postgres-identity:
        condition: service_healthy
      redis-identity:
        condition: service_healthy
    networks:
      - vpn-network
    volumes:
      - ./configs/identity:/etc/vpn-identity
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  postgres-identity:
    image: postgres:16-alpine
    container_name: postgres-identity
    environment:
      - POSTGRES_USER=vpn
      - POSTGRES_PASSWORD=vpn
      - POSTGRES_DB=vpn_identity
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-identity-data:/var/lib/postgresql/data
      - ./configs/postgres/identity-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - vpn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vpn -d vpn_identity"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis-identity:
    image: redis:7-alpine
    container_name: redis-identity
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vpn}
    volumes:
      - redis-identity-data:/data
    networks:
      - vpn-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Optional: LDAP server for testing
  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    environment:
      - LDAP_ORGANISATION=VPN Test
      - LDAP_DOMAIN=vpn.local
      - LDAP_ADMIN_PASSWORD=admin
      - LDAP_CONFIG_PASSWORD=config
      - LDAP_READONLY_USER=true
      - LDAP_READONLY_USER_USERNAME=readonly
      - LDAP_READONLY_USER_PASSWORD=readonly
    volumes:
      - openldap-data:/var/lib/ldap
      - openldap-config:/etc/ldap/slapd.d
      - ./configs/ldap/custom.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom.ldif
    networks:
      - vpn-network
    ports:
      - "389:389"
      - "636:636"
    restart: unless-stopped

  # Optional: LDAP admin interface
  phpldapadmin:
    image: osixia/phpldapadmin:latest
    container_name: phpldapadmin
    environment:
      - PHPLDAPADMIN_LDAP_HOSTS=openldap
      - PHPLDAPADMIN_HTTPS=false
    ports:
      - "8081:80"
    depends_on:
      - openldap
    networks:
      - vpn-network
    restart: unless-stopped

  # OAuth2 proxy for external authentication
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
    container_name: oauth2-proxy
    command:
      - --http-address=0.0.0.0:4180
      - --upstream=http://vpn-identity:8080
      - --cookie-secret=${OAUTH2_COOKIE_SECRET:-change-me-in-production}
      - --cookie-secure=false  # Set to true in production with HTTPS
      - --provider=${OAUTH2_PROVIDER:-google}
      - --client-id=${OAUTH2_CLIENT_ID}
      - --client-secret=${OAUTH2_CLIENT_SECRET}
      - --email-domain=*
      - --pass-authorization-header=true
      - --pass-access-token=true
      - --pass-user-headers=true
      - --set-authorization-header=true
    environment:
      - OAUTH2_PROXY_CLIENT_ID=${OAUTH2_CLIENT_ID}
      - OAUTH2_PROXY_CLIENT_SECRET=${OAUTH2_CLIENT_SECRET}
      - OAUTH2_PROXY_COOKIE_SECRET=${OAUTH2_COOKIE_SECRET:-change-me-in-production}
    ports:
      - "4180:4180"
    depends_on:
      - vpn-identity
    networks:
      - vpn-network
    restart: unless-stopped

volumes:
  postgres-identity-data:
  redis-identity-data:
  openldap-data:
  openldap-config:

networks:
  vpn-network:
    external: true