# Nginx configuration for VPN staging environment
upstream vpn_api {
    least_conn;
    server vpn-api:3000 max_fails=3 fail_timeout=30s;
}

upstream grafana {
    server grafana:3000 max_fails=3 fail_timeout=30s;
}

upstream prometheus {
    server prometheus:9090 max_fails=3 fail_timeout=30s;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;

server {
    listen 80;
    server_name staging.${NGINX_HOST} *.staging.${NGINX_HOST};
    
    # Redirect to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
    
    # ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
}

server {
    listen 443 ssl http2;
    server_name staging.${NGINX_HOST};

    # SSL configuration
    ssl_certificate /etc/nginx/certs/staging.crt;
    ssl_certificate_key /etc/nginx/certs/staging.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

    # Logging
    access_log /var/log/nginx/staging_access.log combined;
    error_log /var/log/nginx/staging_error.log info;

    # API endpoints
    location /api/ {
        limit_req zone=api_limit burst=30 nodelay;
        limit_req_status 429;
        
        proxy_pass http://vpn_api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        
        # CORS headers for staging
        add_header Access-Control-Allow-Origin "https://staging.${NGINX_HOST}" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
    }

    # Authentication endpoints (stricter rate limiting)
    location /api/auth/ {
        limit_req zone=auth_limit burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://vpn_api/auth/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # Metrics endpoint (internal only)
    location /metrics {
        allow 172.20.0.0/16;
        allow 172.21.0.0/16;
        deny all;
        
        proxy_pass http://vpn_api/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    # Static files
    location /static/ {
        alias /var/www/static/;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }

    # Default location
    location / {
        root /var/www/html;
        try_files $uri $uri/ /index.html;
    }
}

# Grafana subdomain
server {
    listen 443 ssl http2;
    server_name staging-grafana.${NGINX_HOST};

    ssl_certificate /etc/nginx/certs/staging.crt;
    ssl_certificate_key /etc/nginx/certs/staging.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://grafana;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# Prometheus subdomain
server {
    listen 443 ssl http2;
    server_name staging-prometheus.${NGINX_HOST};

    ssl_certificate /etc/nginx/certs/staging.crt;
    ssl_certificate_key /etc/nginx/certs/staging.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Basic auth for Prometheus
    auth_basic "Prometheus Access";
    auth_basic_user_file /etc/nginx/.htpasswd_prometheus;

    location / {
        proxy_pass http://prometheus;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}