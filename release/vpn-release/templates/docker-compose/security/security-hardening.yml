# Security Hardening Configuration for Production
# Apply these settings to all production containers

version: '3.8'

# Default security settings for all services
x-security-defaults: &security-defaults
  security_opt:
    - no-new-privileges:true
    - seccomp:unconfined
  cap_drop:
    - ALL
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100M
    - /run:noexec,nosuid,size=100M

# Specific capabilities for services that need them
x-network-caps: &network-caps
  cap_add:
    - NET_ADMIN
    - NET_BIND_SERVICE
    - NET_RAW

x-process-caps: &process-caps
  cap_add:
    - SETUID
    - SETGID
    - CHOWN
    - DAC_OVERRIDE

services:
  # VPN Server with security hardening
  vpn-server:
    <<: *security-defaults
    <<: *network-caps
    image: ${VPN_IMAGE_TAG:-latest}
    user: "1000:1000"  # Non-root user
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      # Only necessary volumes, mounted read-only where possible
      - vpn-config:/etc/vpn:ro
      - vpn-data:/var/lib/vpn:rw
      - vpn-logs:/var/log/vpn:rw
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      vpn-network:
        aliases:
          - vpn-server-secure

  # Traefik with security hardening
  traefik:
    <<: *security-defaults
    <<: *network-caps
    image: traefik:v3.0
    user: "1000:1000"
    command:
      # Security-focused configuration
      - "--api.dashboard=false"
      - "--ping=true"
      - "--global.sendAnonymousUsage=false"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filters.statusCodes=400-499,500-599"
      # TLS configuration
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.options=secure@file"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # Security headers
      - "--entrypoints.websecure.http.middlewares=security-headers@file"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-config:/etc/traefik:ro
      - traefik-certs:/etc/traefik/certs:ro
    deploy:
      labels:
        - "traefik.enable=false"  # Disable Traefik routing to itself

  # PostgreSQL with security hardening
  postgres:
    <<: *security-defaults
    <<: *process-caps
    image: postgres:15-alpine
    user: "70:70"  # postgres user
    read_only: false  # PostgreSQL needs write access
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./configs/postgres/postgresql-secure.conf:/etc/postgresql/postgresql.conf:ro
      - type: tmpfs
        target: /var/run/postgresql
        tmpfs:
          size: 100M
    secrets:
      - postgres_user
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis with security hardening
  redis:
    <<: *security-defaults
    image: redis:7-alpine
    user: "999:999"  # redis user
    read_only: false  # Redis needs write access for persistence
    command:
      - redis-server
      - --requirepass-file
      - /run/secrets/redis_password
      - --bind
      - 127.0.0.1 ::1
      - --protected-mode
      - "yes"
      - --port
      - "0"
      - --tls-port
      - "6379"
      - --tls-cert-file
      - /etc/redis/tls/redis.crt
      - --tls-key-file
      - /etc/redis/tls/redis.key
      - --tls-ca-cert-file
      - /etc/redis/tls/ca.crt
      - --tls-auth-clients
      - "yes"
      - --appendonly
      - "yes"
      - --appendfilename
      - "appendonly.aof"
      - --dbfilename
      - "dump.rdb"
      - --dir
      - /data
    volumes:
      - redis-data:/data:rw
      - redis-tls:/etc/redis/tls:ro
    secrets:
      - redis_password

  # Monitoring with security hardening
  prometheus:
    <<: *security-defaults
    image: prom/prometheus:latest
    user: "65534:65534"  # nobody user
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=https://prometheus.vpn.example.com'
      - '--web.route-prefix=/'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api=false'  # Disable admin API
    volumes:
      - prometheus-data:/prometheus:rw
      - prometheus-config:/etc/prometheus:ro

  grafana:
    <<: *security-defaults
    image: grafana/grafana:latest
    user: "472:472"  # grafana user
    read_only: false  # Grafana needs write access for plugins
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS=63072000
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY_PRELOAD=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY_SUBDOMAINS=true
      - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=true
      - GF_SECURITY_X_XSS_PROTECTION=true
      - GF_SECURITY_CONTENT_SECURITY_POLICY=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_DISABLE_SIGNOUT_MENU=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - grafana-config:/etc/grafana:ro
    secrets:
      - grafana_password

# Network isolation
networks:
  vpn-network:
    driver: overlay
    driver_opts:
      encrypted: "true"
    attachable: false
    internal: false
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/24
          gateway: 10.0.0.1

  monitoring-network:
    driver: overlay
    driver_opts:
      encrypted: "true"
    attachable: false
    internal: true  # Internal network for monitoring
    ipam:
      driver: default
      config:
        - subnet: 10.0.1.0/24

# Secure volume configuration
volumes:
  vpn-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/vpn/config
  
  vpn-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/vpn/data
  
  vpn-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/vpn
  
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/postgresql
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/redis
  
  traefik-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/traefik
  
  traefik-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/traefik/certs

# Secrets configuration
secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
  redis_password:
    external: true
  grafana_password:
    external: true
  vpn_server_key:
    external: true
  traefik_tls_cert:
    external: true
  traefik_tls_key:
    external: true