[tool.poetry]
name = "vpn-manager"
version = "2.0.0"
description = "Modern VPN Management System with TUI"
authors = ["VPN Manager Team <vpn@example.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/ikeniborn/vpn"
homepage = "https://github.com/ikeniborn/vpn"
documentation = "https://vpn-manager.readthedocs.io"
keywords = ["vpn", "proxy", "tui", "docker", "networking", "wireguard", "shadowsocks", "vless"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
    "Framework :: AsyncIO",
]
packages = [
    { include = "vpn" }
]

[tool.poetry.dependencies]
python = "^3.10"
# CLI and UI frameworks
typer = {extras = ["all"], version = "^0.16.0"}
rich = "^14.0.0"
textual = "^4.0.0"
# Data validation and settings
pydantic = "^2.11.0"
pydantic-settings = "^2.6.0"
# Database and ORM
sqlalchemy = {extras = ["asyncio"], version = "^2.0.0"}
aiosqlite = "^0.21.0"
# Container and infrastructure
docker = "^7.0.0"
# Configuration and serialization
pyyaml = "^6.0.1"
toml = "^0.10.2"
jinja2 = "^3.1.2"
jsonschema = "^4.23.0"
# Async HTTP and file operations
aiofiles = "^24.1.0"
aiohttp = "^3.9.1"
# Cryptography and security
cryptography = "^45.0.5"
qrcode = {extras = ["pil"], version = "^8.2"}
# System monitoring
psutil = "^7.0.0"

[tool.poetry.group.dev.dependencies]
# Testing framework
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-timeout = "^2.2.0"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"
# Testing utilities
faker = "^22.0.0"
factory-boy = "^3.3.0"
hypothesis = "^6.92.1"
# Code quality and formatting
ruff = "^0.1.0"
black = "^23.12.0"
mypy = "^1.8.0"
isort = "^5.13.2"
bandit = "^1.7.6"
# Type stubs
types-psutil = "^5.9.5"
# Development tools
ipython = "^8.18.0"
ipdb = "^0.13.13"
pre-commit = "^3.6.0"
# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mkdocs-mermaid2-plugin = "^1.1.0"
# Performance profiling
py-spy = "^0.3.14"
memory-profiler = "^0.61.0"
# Security scanning
safety = "^3.0.1"
# Version management
commitizen = "^3.13.0"

[tool.poetry.scripts]
vpn = "vpn.cli.app:main"
vpn-manager = "vpn.cli.app:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.4"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=vpn",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--maxfail=1",
    "--tb=short",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "docker: marks tests that require docker",
    "network: marks tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["vpn"]
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
    "*/conftest.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Mypy configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_context = true
show_error_codes = true
show_column_numbers = true
show_traceback = true
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin"
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "psutil.*",
    "prometheus_client.*",
    "netifaces.*",
    "supervisor.*",
    "ldap.*",
    "textual.*",
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
fix = true
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "COM",  # flake8-commas
    "PTH",  # flake8-use-pathlib
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "FBT",  # flake8-boolean-trap
    "RUF",  # Ruff-specific rules
    "N",    # pep8-naming
    "D",    # pydocstyle
    "PL",   # pylint
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "E501",  # line too long (handled by black)
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "COM812", # Missing trailing comma
    "TRY003", # Avoid specifying long messages outside the exception class
]
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["D", "S101", "ARG001", "PLR2004"]
"scripts/**/*.py" = ["D", "T201"]

[tool.ruff.isort]
known-first-party = ["vpn"]
known-third-party = ["click", "pydantic", "sqlalchemy", "docker", "textual", "rich"]

[tool.ruff.pydocstyle]
convention = "google"

# Black configuration
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | dist
  | build
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["vpn"]
known_third_party = ["click", "pydantic", "sqlalchemy", "docker", "textual", "rich"]
skip = [".venv", "venv", "__pycache__", ".git"]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "vpn/__init__.py:__version__"
]
update_changelog_on_bump = true
changelog_incremental = true