#!/bin/bash

# VPN Project User Interface Library
# Handles menu display, user input, progress indicators, and UI components

# Source common library
if [ -f "$(dirname "${BASH_SOURCE[0]}")/common.sh" ]; then
    source "$(dirname "${BASH_SOURCE[0]}")/common.sh"
else
    echo "Error: common.sh not found" >&2
    exit 1
fi

# ========================= MENU COMPONENTS =========================

# Draw a header around text (no box)
draw_box() {
    local text="$1"
    local width="${2:-50}"
    local char="${3:-=}"
    
    # Simple header with separator
    echo -e "${GREEN}=== $text ===${NC}"
}

# Create a simple separator line
separator() {
    local length="${1:-50}"
    local char="${2:-=}"
    echo -e "${BLUE}$(printf "%*s" $length "" | tr ' ' "$char")${NC}"
}

# Display header with title
show_header() {
    local title="$1"
    local subtitle="$2"
    
    clear
    echo ""
    draw_box "üõ°Ô∏è  $title" 50
    
    if [ -n "$subtitle" ]; then
        echo ""
        echo -e "  ${BLUE}$subtitle${NC}"
    fi
    echo ""
}

# ========================= MENU FUNCTIONS =========================

# Display main VPN management menu
show_main_menu() {
    show_header "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Xray VPN —Å–µ—Ä–≤–µ—Ä–æ–º"
    
    echo -e "  ${GREEN}üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:${NC}"
    echo -e "    ${YELLOW}1${NC}  üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo -e "    ${YELLOW}2${NC}  ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo -e "    ${YELLOW}3${NC}  ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo -e "    ${YELLOW}4${NC}  ‚úèÔ∏è  –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo -e "    ${YELLOW}5${NC}  üë§ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo ""
    echo -e "  ${GREEN}‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º:${NC}"
    echo -e "    ${YELLOW}6${NC}  üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
    echo -e "    ${YELLOW}7${NC}  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo -e "    ${YELLOW}8${NC}  üîê –†–æ—Ç–∞—Ü–∏—è Reality –∫–ª—é—á–µ–π"
    echo ""
    echo -e "  ${GREEN}üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
    echo -e "    ${YELLOW}9${NC}  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    echo -e "    ${YELLOW}10${NC} üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Xray"
    echo -e "    ${YELLOW}11${NC} üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo -e "    ${YELLOW}12${NC} üõ°Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Watchdog —Å–ª—É–∂–±–æ–π"
    echo ""
    echo -e "  ${RED}‚ö†Ô∏è  –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞:${NC}"
    echo -e "    ${YELLOW}13${NC} üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å VPN —Å–µ—Ä–≤–µ—Ä"
    echo ""
    echo -e "    ${YELLOW}0${NC}  üö™ –í—ã—Ö–æ–¥"
    echo ""
    separator
    echo ""
}

# Show installation type selection menu
show_installation_menu() {
    show_header "–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ VPN —Å–µ—Ä–≤–µ—Ä–∞" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø VPN –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    
    echo -e "   ${YELLOW}1${NC} üöÄ ${WHITE}Xray VPN${NC} (VLESS+Reality)"
    echo -e "      ${PURPLE}‚Ü≥${NC} –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ üõ°Ô∏è"
    echo -e "   ${YELLOW}2${NC} üì± ${WHITE}Outline VPN${NC} (Shadowsocks)"
    echo -e "      ${PURPLE}‚Ü≥${NC} –ü—Ä–æ—Å—Ç–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üéÆ"
    echo ""
}

# Show client information for different platforms
show_client_info() {
    local vpn_type="${1:-xray}"
    
    echo ""
    draw_box "üì± –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è $vpn_type VPN" 50
    echo ""
    
    case "$vpn_type" in
        "xray"|"Xray")
            echo -e "  ${GREEN}ü§ñ Android:${NC}"
            echo -e "    ${YELLOW}‚Ä¢${NC} v2RayTun"
            echo -e "      ${PURPLE}‚Ü≥${NC} ${WHITE}play.google.com/store/apps/details?id=com.v2raytun.android${NC}"
            echo ""
            echo -e "  ${GREEN}üçé iOS:${NC}"
            echo -e "    ${YELLOW}‚Ä¢${NC} Shadowrocket"
            echo -e "      ${PURPLE}‚Ü≥${NC} ${WHITE}apps.apple.com/app/shadowrocket/id932747118${NC}"
            echo -e "    ${YELLOW}‚Ä¢${NC} v2RayTun"
            echo -e "      ${PURPLE}‚Ü≥${NC} ${WHITE}apps.apple.com/app/v2raytun/id6476628951${NC}"
            ;;
        "outline"|"Outline")
            echo -e "  ${GREEN}ü§ñ Android:${NC}"
            echo -e "    ${YELLOW}‚Ä¢${NC} Outline Client"
            echo -e "      ${PURPLE}‚Ü≥${NC} ${WHITE}play.google.com/store/apps/details?id=org.outline.android.client${NC}"
            echo ""
            echo -e "  ${GREEN}üçé iOS:${NC}"
            echo -e "    ${YELLOW}‚Ä¢${NC} Outline Client"
            echo -e "      ${PURPLE}‚Ü≥${NC} ${WHITE}apps.apple.com/app/outline-app/id1356177741${NC}"
            echo ""
            echo -e "  ${GREEN}üñ•Ô∏è  Desktop:${NC}"
            echo -e "    ${YELLOW}‚Ä¢${NC} Outline Client"
            echo -e "      ${PURPLE}‚Ü≥${NC} ${WHITE}getoutline.org/download/${NC}"
            ;;
    esac
    
    echo ""
    echo -e "  ${GREEN}üîó –°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:${NC}"
    echo -e "    ${YELLOW}1.${NC} üì∑ QR-–∫–æ–¥ ${GREEN}(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)${NC} - –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤—ã—à–µ"
    echo -e "    ${YELLOW}2.${NC} üìã –ò–º–ø–æ—Ä—Ç —Å—Å—ã–ª–∫–∏ - —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    echo -e "    ${YELLOW}3.${NC} ‚öôÔ∏è  –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é"
    echo ""
    separator
}

# ========================= INPUT FUNCTIONS =========================

# Get user input with prompt and validation
get_user_input() {
    local prompt="$1"
    local default="$2"
    local validator="$3"  # Optional validation function
    local input=""
    
    while true; do
        if [ -n "$default" ]; then
            read -p "$(echo -e ${GREEN}$prompt [${default}]:${NC} )" input
            input="${input:-$default}"
        else
            read -p "$(echo -e ${GREEN}$prompt:${NC} )" input
        fi
        
        # If no validator specified, accept any non-empty input
        if [ -z "$validator" ]; then
            if [ -n "$input" ]; then
                echo "$input"
                return 0
            else
                warning "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            fi
        else
            # Use validator function
            if $validator "$input"; then
                echo "$input"
                return 0
            else
                warning "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            fi
        fi
    done
}

# Get yes/no confirmation
confirm() {
    local prompt="$1"
    local default="${2:-n}"
    local response=""
    
    while true; do
        read -p "$(echo -e ${YELLOW}$prompt [y/n]:${NC} )" response
        response="${response:-$default}"
        
        case "$response" in
            [Yy]|[Yy][Ee][Ss])
                return 0
                ;;
            [Nn]|[Nn][Oo])
                return 1
                ;;
            *)
                warning "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'"
                ;;
        esac
    done
}

# Get menu choice with validation
get_menu_choice() {
    local prompt="$1"
    local min_choice="${2:-0}"
    local max_choice="${3:-10}"
    local default="${4:-0}"
    local choice=""
    
    while true; do
        read -p "$(echo -e ${GREEN}$prompt [$min_choice-$max_choice]:${NC} )" choice
        choice="${choice:-$default}"
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge "$min_choice" ] && [ "$choice" -le "$max_choice" ]; then
            echo "$choice"
            return 0
        else
            warning "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç $min_choice –¥–æ $max_choice"
        fi
    done
}

# ========================= PROGRESS INDICATORS =========================

# Show simple progress bar
show_progress() {
    local current="$1"
    local total="$2"
    local description="$3"
    local width=50
    
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    local empty=$((width - filled))
    
    printf "\r${BLUE}%s${NC} [" "$description"
    printf "%*s" $filled "" | tr ' ' '‚ñà'
    printf "%*s" $empty "" | tr ' ' '‚ñë'
    printf "] %d%%" $percentage
    
    if [ "$current" -eq "$total" ]; then
        echo ""
    fi
}

# Show spinner animation
show_spinner() {
    local pid="$1"
    local message="$2"
    local spin='-\|/'
    local i=0
    
    while kill -0 "$pid" 2>/dev/null; do
        i=$(( (i+1) %4 ))
        printf "\r${BLUE}%s${NC} %c" "$message" "${spin:$i:1}"
        sleep 0.1
    done
    printf "\r${GREEN}%s${NC} ‚úì\n" "$message"
}

# ========================= STATUS DISPLAY =========================

# Show status with colored indicator
show_status() {
    local service="$1"
    local status="$2"
    local details="$3"
    
    case "$status" in
        "active"|"running"|"healthy"|"online")
            echo -e "  ‚Ä¢ $service: ${GREEN}‚óè $status${NC}"
            ;;
        "inactive"|"stopped"|"unhealthy"|"offline")
            echo -e "  ‚Ä¢ $service: ${RED}‚óè $status${NC}"
            ;;
        "starting"|"pending"|"loading")
            echo -e "  ‚Ä¢ $service: ${YELLOW}‚óè $status${NC}"
            ;;
        *)
            echo -e "  ‚Ä¢ $service: ${BLUE}‚óè $status${NC}"
            ;;
    esac
    
    if [ -n "$details" ]; then
        echo -e "    ${PURPLE}‚Ü≥${NC} $details"
    fi
}

# ========================= WELCOME/COMPLETION SCREENS =========================

# Show welcome screen
show_welcome() {
    clear
    echo ""
    echo -e "${GREEN}=== üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ VPN! ===${NC}"
    echo ""
}

# Show completion message
show_completion() {
    local title="$1"
    local message="$2"
    
    echo ""
    echo -e "${GREEN}=== üéâ $title ===${NC}"
    echo ""
    
    if [ -n "$message" ]; then
        echo -e "${BLUE}$message${NC}"
        echo ""
    fi
}

# ========================= ERROR DISPLAY =========================

# Show error message with header
show_error_box() {
    local error_msg="$1"
    
    echo ""
    echo -e "${RED}=== ‚ùå –û–®–ò–ë–ö–ê ===${NC}"
    echo ""
    echo -e "${RED}$error_msg${NC}"
    echo ""
}

# ========================= HELPER FUNCTIONS =========================

# Wait for user to press Enter
wait_for_enter() {
    echo ""
    read -p "$(echo -e ${BLUE}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC})"
}

# Pause with custom message
pause() {
    local message="${1:-–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...}"
    echo ""
    read -p "$(echo -e ${BLUE}$message${NC})"
}

# Clear screen and show header
reset_screen() {
    local title="$1"
    clear
    if [ -n "$title" ]; then
        show_header "$title"
    fi
}

# ========================= TABLE DISPLAY =========================

# Display table with headers
show_table() {
    local headers=("$@")
    local max_width=20
    
    # Print header
    printf "${BLUE}"
    for header in "${headers[@]}"; do
        printf "%-${max_width}s " "$header"
    done
    printf "${NC}\n"
    
    # Print separator
    printf "${BLUE}"
    for header in "${headers[@]}"; do
        printf "%*s " $max_width "" | tr ' ' '-'
    done
    printf "${NC}\n"
}

# Add table row
show_table_row() {
    local cells=("$@")
    local max_width=20
    
    for cell in "${cells[@]}"; do
        printf "%-${max_width}s " "$cell"
    done
    printf "\n"
}

# ========================= INITIALIZATION =========================

# Initialize UI library
init_ui() {
    debug "Initializing UI library"
    
    # Set terminal title if supported
    if [ -n "$TERM" ] && [ "$TERM" != "dumb" ]; then
        printf "\033]0;VPN Management System\007"
    fi
    
    # Ensure proper terminal settings
    stty sane 2>/dev/null || true
}