"""
Tests for Pydantic models.
"""

from datetime import datetime, timedelta
from uuid import uuid4

import pytest
from pydantic import ValidationError

from vpn.core.models import (
    CryptoKeys,
    ProtocolConfig,
    ProtocolType,
    TrafficStats,
    User,
    UserStatus,
    ServerConfig,
    DockerConfig,
    FirewallRule,
    ServerStatus,
)


class TestTrafficStats:
    """Test TrafficStats model."""
    
    def test_default_values(self):
        """Test default values."""
        stats = TrafficStats()
        assert stats.upload_bytes == 0
        assert stats.download_bytes == 0
        assert stats.total_bytes == 0
        assert isinstance(stats.last_reset, datetime)
    
    def test_mb_properties(self):
        """Test megabyte conversion properties."""
        stats = TrafficStats(
            upload_bytes=1024 * 1024 * 10,  # 10 MB
            download_bytes=1024 * 1024 * 20,  # 20 MB
            total_bytes=1024 * 1024 * 30,  # 30 MB
        )
        assert stats.upload_mb == 10.0
        assert stats.download_mb == 20.0
        assert stats.total_mb == 30.0


class TestCryptoKeys:
    """Test CryptoKeys model."""
    
    def test_default_uuid(self):
        """Test UUID is generated by default."""
        keys = CryptoKeys()
        assert keys.uuid is not None
        assert len(keys.uuid) == 36  # Standard UUID string length
    
    def test_all_fields(self):
        """Test all fields can be set."""
        keys = CryptoKeys(
            private_key="private_test",
            public_key="public_test",
            short_id="short_test",
            uuid="custom-uuid",
            password="password123"
        )
        assert keys.private_key == "private_test"
        assert keys.public_key == "public_test"
        assert keys.short_id == "short_test"
        assert keys.uuid == "custom-uuid"
        assert keys.password == "password123"


class TestProtocolConfig:
    """Test ProtocolConfig model."""
    
    def test_vless_config(self):
        """Test VLESS protocol configuration."""
        config = ProtocolConfig(
            type=ProtocolType.VLESS,
            flow="xtls-rprx-vision",
            encryption="none",
            reality_enabled=True,
            reality_public_key="test_public_key",
            reality_short_id="test_short_id"
        )
        assert config.type == ProtocolType.VLESS
        assert config.flow == "xtls-rprx-vision"
        assert config.reality_enabled is True
    
    def test_shadowsocks_config(self):
        """Test Shadowsocks protocol configuration."""
        config = ProtocolConfig(
            type=ProtocolType.SHADOWSOCKS,
            method="aes-256-gcm"
        )
        assert config.type == ProtocolType.SHADOWSOCKS
        assert config.method == "aes-256-gcm"
    
    def test_proxy_config(self):
        """Test proxy protocol configuration."""
        config = ProtocolConfig(
            type=ProtocolType.HTTP,
            auth_required=True,
            rate_limit=1024 * 1024,  # 1 MB/s
            connection_limit=100
        )
        assert config.type == ProtocolType.HTTP
        assert config.auth_required is True
        assert config.rate_limit == 1024 * 1024
        assert config.connection_limit == 100


class TestUser:
    """Test User model."""
    
    def test_minimal_user(self):
        """Test creating user with minimal fields."""
        protocol = ProtocolConfig(type=ProtocolType.VLESS)
        user = User(username="testuser", protocol=protocol)
        
        assert user.username == "testuser"
        assert user.status == UserStatus.ACTIVE
        assert isinstance(user.id, uuid4().__class__)
        assert isinstance(user.keys, CryptoKeys)
        assert isinstance(user.traffic, TrafficStats)
    
    def test_username_validation(self):
        """Test username validation."""
        protocol = ProtocolConfig(type=ProtocolType.VLESS)
        
        # Valid usernames
        user1 = User(username="test_user", protocol=protocol)
        assert user1.username == "test_user"
        
        user2 = User(username="Test-User", protocol=protocol)
        assert user2.username == "test-user"  # Converted to lowercase
        
        # Invalid usernames
        with pytest.raises(ValidationError):
            User(username="ab", protocol=protocol)  # Too short
        
        with pytest.raises(ValidationError):
            User(username="test@user", protocol=protocol)  # Invalid character
    
    def test_email_validation(self):
        """Test email validation."""
        protocol = ProtocolConfig(type=ProtocolType.VLESS)
        
        # Valid email
        user = User(username="test", email="Test@Example.com", protocol=protocol)
        assert user.email == "test@example.com"  # Converted to lowercase
        
        # Invalid emails
        with pytest.raises(ValidationError):
            User(username="test", email="invalid", protocol=protocol)
        
        with pytest.raises(ValidationError):
            User(username="test", email="@example.com", protocol=protocol)
    
    def test_is_active_property(self):
        """Test is_active property."""
        protocol = ProtocolConfig(type=ProtocolType.VLESS)
        
        # Active user
        user = User(username="test", protocol=protocol)
        assert user.is_active is True
        
        # Inactive user
        user.status = UserStatus.INACTIVE
        assert user.is_active is False
        
        # Expired user
        user.status = UserStatus.ACTIVE
        user.expires_at = datetime.utcnow() - timedelta(days=1)
        assert user.is_active is False


class TestServerConfig:
    """Test ServerConfig model."""
    
    def test_minimal_server(self):
        """Test creating server with minimal fields."""
        docker_config = DockerConfig(image="vpn/server")
        protocol = ProtocolConfig(type=ProtocolType.VLESS)
        
        server = ServerConfig(
            name="test-server",
            protocol=protocol,
            port=8443,
            docker_config=docker_config
        )
        
        assert server.name == "test-server"
        assert server.port == 8443
        assert server.status == ServerStatus.STOPPED
        assert server.auto_start is True
    
    def test_port_validation(self):
        """Test port validation."""
        docker_config = DockerConfig(image="vpn/server")
        protocol = ProtocolConfig(type=ProtocolType.VLESS)
        
        # Valid port
        server = ServerConfig(
            name="test",
            protocol=protocol,
            port=8443,
            docker_config=docker_config
        )
        assert server.port == 8443
        
        # Invalid port (well-known)
        with pytest.raises(ValidationError):
            ServerConfig(
                name="test",
                protocol=protocol,
                port=80,
                docker_config=docker_config
            )
        
        # Invalid port (out of range)
        with pytest.raises(ValidationError):
            ServerConfig(
                name="test",
                protocol=protocol,
                port=70000,
                docker_config=docker_config
            )


class TestFirewallRule:
    """Test FirewallRule model."""
    
    def test_default_values(self):
        """Test default values."""
        rule = FirewallRule(port=8443)
        assert rule.protocol == "tcp"
        assert rule.port == 8443
        assert rule.action == "allow"
        assert rule.source is None
    
    def test_all_fields(self):
        """Test all fields."""
        rule = FirewallRule(
            protocol="both",
            port=9000,
            source="192.168.1.0/24",
            action="deny",
            comment="Block local network"
        )
        assert rule.protocol == "both"
        assert rule.port == 9000
        assert rule.source == "192.168.1.0/24"
        assert rule.action == "deny"
        assert rule.comment == "Block local network"