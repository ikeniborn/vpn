version: '3.8'

services:
  vpn-manager:
    build:
      context: .
      target: production
    container_name: vpn-manager
    hostname: vpn-manager
    restart: unless-stopped
    privileged: true
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - vpn-config:/home/app/.config/vpn-manager
      - vpn-data:/home/app/.local/share/vpn-manager
      - vpn-logs:/var/log/vpn-manager
    environment:
      - VPN_LOG_LEVEL=info
      - VPN_DATABASE_URL=sqlite:////home/app/.local/share/vpn-manager/vpn.db
      - VPN_DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "8443:8443"    # VLESS
      - "8444:8444"    # Shadowsocks
      - "1080:1080"    # SOCKS5 proxy
      - "8888:8888"    # HTTP proxy
      - "51820:51820/udp"  # WireGuard
    healthcheck:
      test: ["CMD", "vpn", "doctor", "--check", "basic"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - redis
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vpn-manager.rule=Host(`vpn.localhost`)"
      - "traefik.http.routers.vpn-manager.entrypoints=web"
      - "traefik.http.services.vpn-manager.loadbalancer.server.port=8443"

  redis:
    image: redis:7-alpine
    container_name: vpn-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

  postgres:
    image: postgres:15-alpine
    container_name: vpn-postgres
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=vpn_manager
      - POSTGRES_USER=vpn_manager
      - POSTGRES_PASSWORD=vpn_manager_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vpn_manager"]
      interval: 30s
      timeout: 10s
      retries: 3

  traefik:
    image: traefik:v3.0
    container_name: vpn-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - traefik-data:/data
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=web"

  prometheus:
    image: prom/prometheus:latest
    container_name: vpn-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --storage.tsdb.retention.time=200h
      - --web.enable-lifecycle
      - --web.enable-admin-api

  grafana:
    image: grafana/grafana:latest
    container_name: vpn-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: vpn-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    ports:
      - "9100:9100"

volumes:
  vpn-config:
    driver: local
  vpn-data:
    driver: local
  vpn-logs:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  traefik-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16