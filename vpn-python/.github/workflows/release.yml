name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        run: |
          poetry run pytest \
            --cov=vpn \
            --cov-report=xml \
            -v

      - name: Run security checks
        run: |
          poetry run safety check
          poetry run bandit -r vpn/

  build:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, aarch64]
        exclude:
          - os: windows-latest
            arch: aarch64
          - os: macos-latest
            arch: aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build wheel and sdist
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        run: poetry build

      - name: Install PyInstaller
        run: poetry run pip install pyinstaller

      - name: Build binary with PyInstaller (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          poetry run pyinstaller \
            --onefile \
            --name vpn-${{ matrix.os }}-${{ matrix.arch }} \
            --add-data "vpn/templates:vpn/templates" \
            --hidden-import=vpn.cli.main \
            --console \
            vpn/cli/main.py

      - name: Build binary with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          poetry run pyinstaller \
            --onefile \
            --name vpn-windows-${{ matrix.arch }}.exe \
            --add-data "vpn/templates;vpn/templates" \
            --hidden-import=vpn.cli.main \
            --console \
            vpn/cli/main.py

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/
            *.spec

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            vpnmanager/vpn-python:${{ steps.version.outputs.version }}
            vpnmanager/vpn-python:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    environment:
      name: pypi
      url: https://pypi.org/project/vpn-manager/
    permissions:
      id-token: write  # For trusted publishing

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git log
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual releases, get changes since last tag
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREV_TAG" ]; then
              CHANGES=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
            else
              CHANGES=$(git log --pretty=format:"- %s" --max-count=10)
            fi
          else
            # For tag-based releases, get changes since previous tag
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREV_TAG" ]; then
              CHANGES=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
            else
              CHANGES=$(git log --pretty=format:"- %s" --max-count=10)
            fi
          fi
          
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          cat > release_notes.md << 'EOF'
          ## What's Changed
          
          ${{ steps.changelog.outputs.changes }}
          
          ## Installation
          
          ### PyPI
          ```bash
          pip install vpn-manager==${{ steps.version.outputs.version }}
          ```
          
          ### Docker
          ```bash
          docker pull vpnmanager/vpn-python:${{ steps.version.outputs.version }}
          ```
          
          ### Binary Downloads
          
          Download the appropriate binary for your platform from the assets below.
          
          ### Verification
          
          All release assets are signed and can be verified using:
          ```bash
          # Verify checksums
          sha256sum -c checksums.txt
          ```
          
          ## Migration
          
          If upgrading from a previous version, see the [Migration Guide](https://docs.vpn-manager.io/migration/).
          
          ## Support
          
          - 📖 [Documentation](https://docs.vpn-manager.io/)
          - 💬 [Discord Community](https://discord.gg/vpn-manager)
          - 🐛 [Report Issues](https://github.com/vpn-manager/vpn-python/issues)
          EOF

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy Python packages
          if [ -d "binaries-ubuntu-latest-x86_64/dist" ]; then
            cp binaries-ubuntu-latest-x86_64/dist/* release-assets/ 2>/dev/null || true
          fi
          
          # Copy binaries
          find . -name "vpn-*" -type f -executable -exec cp {} release-assets/ \; 2>/dev/null || true
          find . -name "vpn-*.exe" -type f -exec cp {} release-assets/ \; 2>/dev/null || true
          
          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  packages:
    name: Build System Packages
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push'  # Only for tag pushes

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            devscripts \
            debhelper \
            dh-python \
            rpm \
            alien

      - name: Build package
        run: poetry build

      - name: Create DEB package
        run: |
          # Create DEB package structure
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/usr/local/bin
          mkdir -p deb-package/etc/vpn-manager
          
          # Install Python package in package directory
          pip install --target deb-package/usr/local/lib/python3/dist-packages dist/*.whl
          
          # Create control file
          cat > deb-package/DEBIAN/control << EOF
          Package: vpn-manager
          Version: ${GITHUB_REF#refs/tags/v}
          Section: net
          Priority: optional
          Architecture: amd64
          Depends: python3 (>= 3.10), docker.io
          Maintainer: VPN Manager Team <team@vpn-manager.io>
          Description: Comprehensive VPN management system
           A modern VPN management system with multi-protocol support,
           Docker integration, and terminal user interface.
          EOF
          
          # Create package
          dpkg-deb --build deb-package vpn-manager_${GITHUB_REF#refs/tags/v}_amd64.deb

      - name: Create RPM package
        run: |
          # Convert DEB to RPM
          sudo alien --to-rpm --scripts vpn-manager_${GITHUB_REF#refs/tags/v}_amd64.deb

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: system-packages
          path: |
            *.deb
            *.rpm

  homebrew:
    name: Update Homebrew Formula
    runs-on: macos-latest
    needs: [github-release]
    if: github.event_name == 'push'

    steps:
      - name: Update Homebrew formula
        run: |
          # This would typically push to a homebrew tap repository
          echo "Homebrew formula update would be implemented here"
          # For now, this is a placeholder

  chocolatey:
    name: Update Chocolatey Package
    runs-on: windows-latest
    needs: [github-release]
    if: github.event_name == 'push'

    steps:
      - name: Update Chocolatey package
        run: |
          # This would typically update the Chocolatey package
          echo "Chocolatey package update would be implemented here"
          # For now, this is a placeholder

  snap:
    name: Build Snap Package
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Build snap
        uses: snapcore/action-build@v1
        id: build

      - name: Upload snap artifact
        uses: actions/upload-artifact@v3
        with:
          name: snap-package
          path: ${{ steps.build.outputs.snap }}

      - name: Publish to Snap Store
        if: github.ref == 'refs/heads/main'
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
        with:
          snap: ${{ steps.build.outputs.snap }}
          release: stable

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [github-release, pypi, docker]
    if: always()

    steps:
      - name: Notify on success
        if: needs.github-release.result == 'success' && needs.pypi.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          text: |
            🎉 New release published successfully!
            Version: ${{ github.ref_name }}
            PyPI: https://pypi.org/project/vpn-manager/
            Docker: https://hub.docker.com/r/vpnmanager/vpn-python
            GitHub: ${{ github.event.release.html_url }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#releases'
          text: |
            ❌ Release failed!
            Version: ${{ github.ref_name }}
            Check the workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}