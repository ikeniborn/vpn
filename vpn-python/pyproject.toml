[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vpn-manager"
version = "2.0.0"
description = "Modern VPN Management System with TUI"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "VPN Manager Team", email = "vpn@example.com"},
]
keywords = ["vpn", "proxy", "tui", "docker", "networking"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
]

dependencies = [
    "click>=8.1.7",
    "typer[all]>=0.9.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "aiosqlite>=0.19.0",
    "docker>=7.0.0",
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    "jinja2>=3.1.2",
    "rich>=13.7.0",
    "textual>=0.47.0",
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    "cryptography>=41.0.0",
    "qrcode[pil]>=7.4.0",
    "psutil>=5.9.0",
    "prometheus-client>=0.19.0",
    "python-dotenv>=1.0.0",
    "aiocache>=0.12.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "black>=23.12.0",
    "pre-commit>=3.6.0",
    "ipython>=8.18.0",
    "types-pyyaml>=6.0.0",
    "types-toml>=0.10.0",
    "types-aiofiles>=23.2.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "faker>=22.0.0",
    "factory-boy>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/ikeniborn/vpn-python"
Documentation = "https://vpn-manager.readthedocs.io"
Repository = "https://github.com/ikeniborn/vpn-python"
Issues = "https://github.com/ikeniborn/vpn-python/issues"

[project.scripts]
vpn = "vpn.cli.app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["vpn*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
vpn = [
    "templates/**/*",
    "scripts/**/*",
    "py.typed",
]

# Development tools configuration

[tool.pytest.ini_options]
minversion = "7.4"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--cov=vpn",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "-vv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["vpn"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_context = true
show_error_codes = true
show_column_numbers = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "psutil.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PL",  # pylint
]
ignore = [
    "E501",  # line too long (handled by black)
    "PLR0913", # too many arguments
]
fix = true

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["PLR2004", "S101", "ARG001"]

[tool.ruff.isort]
known-third-party = ["click", "pydantic", "sqlalchemy", "docker"]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''