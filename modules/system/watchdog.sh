#!/bin/bash

# =============================================================================
# VPN Watchdog Module
# 
# This module provides container monitoring and automatic recovery functionality.
# It monitors VPN containers and restarts them if they fail.
#
# Functions:
#   - install_watchdog_service
#   - remove_watchdog_service
#   - start_watchdog_service
#   - stop_watchdog_service
#   - get_watchdog_status
#   - run_watchdog_monitor
#
# Author: Claude
# Version: 1.0 (Modular)
# =============================================================================

# Source common library if not already sourced
if [ -z "$COMMON_SOURCED" ]; then
    source "$(dirname "${BASH_SOURCE[0]}")/../../lib/common.sh" || {
        echo "Error: Cannot source lib/common.sh from $LIB_PATH/common.sh"
        return 1
    }
fi

# =============================================================================
# WATCHDOG CONFIGURATION
# =============================================================================

# Default configuration
WATCHDOG_CHECK_INTERVAL="${WATCHDOG_CHECK_INTERVAL:-60}"  # seconds
WATCHDOG_MAX_RESTART_ATTEMPTS="${WATCHDOG_MAX_RESTART_ATTEMPTS:-3}"
WATCHDOG_RESTART_COOLDOWN="${WATCHDOG_RESTART_COOLDOWN:-300}"  # 5 minutes
WATCHDOG_LOG_FILE="${WATCHDOG_LOG_FILE:-/var/log/vpn-watchdog.log}"
WATCHDOG_SERVICE_NAME="vpn-watchdog"

# =============================================================================
# SERVICE MANAGEMENT FUNCTIONS
# =============================================================================

# Create watchdog service file content
generate_watchdog_service() {
    local debug="${1:-false}"
    
    cat <<EOF
[Unit]
Description=VPN Container Watchdog Service
Documentation=https://github.com/yourusername/vpn
After=docker.service
Requires=docker.service

[Service]
Type=simple
ExecStart=/usr/local/bin/vpn-watchdog
Restart=always
RestartSec=30
StandardOutput=journal
StandardError=journal
SyslogIdentifier=vpn-watchdog
User=root
Environment="WATCHDOG_CHECK_INTERVAL=${WATCHDOG_CHECK_INTERVAL}"
Environment="WATCHDOG_MAX_RESTART_ATTEMPTS=${WATCHDOG_MAX_RESTART_ATTEMPTS}"
Environment="WATCHDOG_RESTART_COOLDOWN=${WATCHDOG_RESTART_COOLDOWN}"
Environment="WATCHDOG_LOG_FILE=${WATCHDOG_LOG_FILE}"

[Install]
WantedBy=multi-user.target
EOF
}

# Create watchdog script content
generate_watchdog_script() {
    local debug="${1:-false}"
    local script_dir="${2:-/opt/vpn}"
    
    cat <<'EOF'
#!/bin/bash

# VPN Watchdog Daemon Script
# Auto-generated by vpn.sh watchdog module

# Set script directory
SCRIPT_DIR="${SCRIPT_DIR:-/opt/vpn}"

# Source the watchdog module
source "$SCRIPT_DIR/modules/system/watchdog.sh" || {
    echo "Error: Cannot source watchdog module"
    exit 1
}

# Run the watchdog monitor
run_watchdog_monitor
EOF
}

# Install watchdog service
install_watchdog_service() {
    local debug="${1:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    log "Installing VPN watchdog service..."
    
    # Check prerequisites
    if ! command -v systemctl >/dev/null 2>&1; then
        error "systemd is not available on this system"
        return 1
    fi
    
    # Create watchdog script
    local watchdog_script="/usr/local/bin/vpn-watchdog"
    
    [[ "$debug" == true ]] && log "Creating watchdog script at: $watchdog_script"
    
    # Generate and install watchdog script
    generate_watchdog_script "$debug" "$SCRIPT_DIR" > "$watchdog_script" || {
        error "Failed to create watchdog script"
        return 1
    }
    
    # Set script directory in watchdog script
    sed -i "s|SCRIPT_DIR=\"\${SCRIPT_DIR:-/opt/vpn}\"|SCRIPT_DIR=\"$SCRIPT_DIR\"|" "$watchdog_script"
    
    chmod +x "$watchdog_script" || {
        error "Failed to make watchdog script executable"
        return 1
    }
    
    # Create systemd service file
    local service_file="/etc/systemd/system/${WATCHDOG_SERVICE_NAME}.service"
    
    [[ "$debug" == true ]] && log "Creating service file at: $service_file"
    
    generate_watchdog_service "$debug" > "$service_file" || {
        error "Failed to create service file"
        return 1
    }
    
    # Create log directory
    local log_dir=$(dirname "$WATCHDOG_LOG_FILE")
    mkdir -p "$log_dir" 2>/dev/null || true
    
    # Reload systemd
    systemctl daemon-reload || {
        error "Failed to reload systemd"
        return 1
    }
    
    # Enable service
    systemctl enable "${WATCHDOG_SERVICE_NAME}.service" || {
        error "Failed to enable watchdog service"
        return 1
    }
    
    log "Watchdog service installed successfully"
    log "Use 'systemctl start ${WATCHDOG_SERVICE_NAME}' to start the service"
    
    [[ "$debug" == true ]] && set +x
    return 0
}

# Remove watchdog service
remove_watchdog_service() {
    local debug="${1:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    log "Removing VPN watchdog service..."
    
    # Stop service if running
    if systemctl is-active --quiet "${WATCHDOG_SERVICE_NAME}.service"; then
        systemctl stop "${WATCHDOG_SERVICE_NAME}.service" || {
            warning "Failed to stop watchdog service"
        }
    fi
    
    # Disable service
    if systemctl is-enabled --quiet "${WATCHDOG_SERVICE_NAME}.service"; then
        systemctl disable "${WATCHDOG_SERVICE_NAME}.service" || {
            warning "Failed to disable watchdog service"
        }
    fi
    
    # Remove service file
    rm -f "/etc/systemd/system/${WATCHDOG_SERVICE_NAME}.service"
    
    # Remove watchdog script
    rm -f "/usr/local/bin/vpn-watchdog"
    
    # Reload systemd
    systemctl daemon-reload
    
    log "Watchdog service removed"
    
    [[ "$debug" == true ]] && set +x
    return 0
}

# Start watchdog service
start_watchdog_service() {
    local debug="${1:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    log "Starting VPN watchdog service..."
    
    # Check if service exists
    if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then
        error "Watchdog service is not installed. Run 'watchdog install' first."
        return 1
    fi
    
    # Start service
    systemctl start "${WATCHDOG_SERVICE_NAME}.service" || {
        error "Failed to start watchdog service"
        return 1
    }
    
    # Wait a moment for service to start
    sleep 2
    
    # Check if service is running
    if systemctl is-active --quiet "${WATCHDOG_SERVICE_NAME}.service"; then
        log "Watchdog service started successfully"
    else
        error "Watchdog service failed to start"
        systemctl status "${WATCHDOG_SERVICE_NAME}.service"
        return 1
    fi
    
    [[ "$debug" == true ]] && set +x
    return 0
}

# Stop watchdog service
stop_watchdog_service() {
    local debug="${1:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    log "Stopping VPN watchdog service..."
    
    # Stop service
    systemctl stop "${WATCHDOG_SERVICE_NAME}.service" || {
        error "Failed to stop watchdog service"
        return 1
    }
    
    log "Watchdog service stopped"
    
    [[ "$debug" == true ]] && set +x
    return 0
}

# Get watchdog service status
get_watchdog_status() {
    local debug="${1:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    echo -e "${GREEN}=== VPN Watchdog Service Status ===${NC}"
    echo ""
    
    # Check if service exists
    if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then
        echo -e "${RED}Status: Not Installed${NC}"
        echo "Run 'vpn.sh watchdog install' to install the service"
        return 1
    fi
    
    # Get service status
    local is_active=$(systemctl is-active "${WATCHDOG_SERVICE_NAME}.service" 2>/dev/null)
    local is_enabled=$(systemctl is-enabled "${WATCHDOG_SERVICE_NAME}.service" 2>/dev/null)
    
    # Display status
    if [ "$is_active" = "active" ]; then
        echo -e "${GREEN}● Service Status: Active (running)${NC}"
    else
        echo -e "${RED}● Service Status: $is_active${NC}"
    fi
    
    echo -e "  Enabled: $is_enabled"
    
    # Show recent logs
    echo -e "\n${YELLOW}Recent Logs:${NC}"
    if [ -f "$WATCHDOG_LOG_FILE" ]; then
        tail -10 "$WATCHDOG_LOG_FILE" 2>/dev/null || {
            journalctl -u "${WATCHDOG_SERVICE_NAME}.service" -n 10 --no-pager 2>/dev/null || true
        }
    else
        journalctl -u "${WATCHDOG_SERVICE_NAME}.service" -n 10 --no-pager 2>/dev/null || true
    fi
    
    # Show process info
    echo -e "\n${YELLOW}Process Information:${NC}"
    systemctl status "${WATCHDOG_SERVICE_NAME}.service" --no-pager | head -15
    
    [[ "$debug" == true ]] && set +x
    return 0
}

# =============================================================================
# MONITORING FUNCTIONS
# =============================================================================

# Log to watchdog log file
watchdog_log() {
    local message="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" | tee -a "$WATCHDOG_LOG_FILE"
}

# Check container health
check_container_health() {
    local container_name="$1"
    local debug="${2:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    # Check if container exists
    local container_exists=$(docker ps -a --format "{{.Names}}" | grep -E "^${container_name}$" || echo "")
    
    if [ -z "$container_exists" ]; then
        [[ "$debug" == true ]] && set +x
        return 1  # Container doesn't exist
    fi
    
    # Get container status
    local container_status=$(docker inspect -f '{{.State.Status}}' "$container_name" 2>/dev/null || echo "")
    local container_health=$(docker inspect -f '{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "none")
    
    if [ "$container_status" != "running" ]; then
        watchdog_log "Container $container_name is not running (status: $container_status)"
        [[ "$debug" == true ]] && set +x
        return 1
    fi
    
    if [ "$container_health" != "none" ] && [ "$container_health" != "healthy" ]; then
        watchdog_log "Container $container_name is unhealthy (health: $container_health)"
        [[ "$debug" == true ]] && set +x
        return 1
    fi
    
    [[ "$debug" == true ]] && set +x
    return 0
}

# Restart container with docker-compose
restart_container() {
    local container_name="$1"
    local work_dir="$2"
    local debug="${3:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    watchdog_log "Attempting to restart container: $container_name"
    
    cd "$work_dir" || {
        watchdog_log "Failed to change to directory: $work_dir"
        return 1
    }
    
    # Stop container
    docker-compose down || {
        # Fallback to docker commands
        docker stop "$container_name" 2>/dev/null || true
        docker rm "$container_name" 2>/dev/null || true
    }
    
    sleep 5
    
    # Start container
    if docker-compose up -d; then
        watchdog_log "Container $container_name restarted successfully"
        [[ "$debug" == true ]] && set +x
        return 0
    else
        watchdog_log "Failed to restart container $container_name"
        [[ "$debug" == true ]] && set +x
        return 1
    fi
}

# Check system resources
check_system_resources() {
    local debug="${1:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    local memory_usage=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
    local disk_usage=$(df -h / | tail -1 | awk '{print int($5)}')
    
    if [ "$memory_usage" -gt 90 ]; then
        watchdog_log "WARNING: High memory usage: ${memory_usage}%"
    fi
    
    if [ "$disk_usage" -gt 90 ]; then
        watchdog_log "WARNING: High disk usage: ${disk_usage}%"
    fi
    
    [[ "$debug" == true ]] && set +x
}

# Clean up resources
cleanup_resources() {
    local debug="${1:-false}"
    
    [[ "$debug" == true ]] && set -x
    
    watchdog_log "Performing resource cleanup..."
    
    # Rotate logs
    if [ -f "$WATCHDOG_LOG_FILE" ] && [ $(stat -c%s "$WATCHDOG_LOG_FILE" 2>/dev/null || echo 0) -gt 10485760 ]; then
        mv "$WATCHDOG_LOG_FILE" "${WATCHDOG_LOG_FILE}.old"
        touch "$WATCHDOG_LOG_FILE"
        watchdog_log "Log file rotated"
    fi
    
    # Clean up Docker resources
    docker system prune -f --volumes 2>/dev/null || true
    
    [[ "$debug" == true ]] && set +x
}

# =============================================================================
# MAIN MONITORING LOOP
# =============================================================================

# Run watchdog monitor (main loop)
run_watchdog_monitor() {
    local debug="${WATCHDOG_DEBUG:-false}"
    
    # Initialize restart tracking
    declare -A restart_attempts
    declare -A last_restart_time
    
    # Trap signals for clean shutdown
    trap 'watchdog_log "VPN Watchdog stopped"; exit 0' SIGTERM SIGINT
    
    watchdog_log "VPN Watchdog started (PID: $$)"
    watchdog_log "Configuration: Check interval=${WATCHDOG_CHECK_INTERVAL}s, Max attempts=${WATCHDOG_MAX_RESTART_ATTEMPTS}, Cooldown=${WATCHDOG_RESTART_COOLDOWN}s"
    
    # Main monitoring loop
    while true; do
        # Check Xray container
        if [ -d "$WORK_DIR" ] && [ -f "$WORK_DIR/docker-compose.yml" ]; then
            if ! check_container_health "xray" "$debug"; then
                current_time=$(date +%s)
                container_key="xray"
                
                # Initialize counters if not exists
                if [ -z "${restart_attempts[$container_key]}" ]; then
                    restart_attempts[$container_key]=0
                    last_restart_time[$container_key]=0
                fi
                
                # Check cooldown period
                time_since_last_restart=$((current_time - last_restart_time[$container_key]))
                
                if [ "${restart_attempts[$container_key]}" -ge "$WATCHDOG_MAX_RESTART_ATTEMPTS" ]; then
                    if [ "$time_since_last_restart" -lt "$WATCHDOG_RESTART_COOLDOWN" ]; then
                        watchdog_log "Container xray in cooldown period. Waiting..."
                        sleep "$WATCHDOG_CHECK_INTERVAL"
                        continue
                    else
                        # Reset counter after cooldown
                        restart_attempts[$container_key]=0
                    fi
                fi
                
                # Attempt restart
                restart_attempts[$container_key]=$((restart_attempts[$container_key] + 1))
                last_restart_time[$container_key]=$current_time
                
                watchdog_log "Restart attempt ${restart_attempts[$container_key]}/$WATCHDOG_MAX_RESTART_ATTEMPTS for xray"
                restart_container "xray" "$WORK_DIR" "$debug"
                
                # Wait for container to stabilize
                sleep 30
            else
                # Reset counter on successful check
                restart_attempts["xray"]=0
            fi
        fi
        
        # Check v2rayA client container if it exists
        if [ -d "/opt/v2raya" ] && [ -f "/opt/v2raya/docker-compose.yml" ]; then
            if ! check_container_health "v2raya" "$debug"; then
                current_time=$(date +%s)
                container_key="v2raya"
                
                # Initialize counters if not exists
                if [ -z "${restart_attempts[$container_key]}" ]; then
                    restart_attempts[$container_key]=0
                    last_restart_time[$container_key]=0
                fi
                
                # Similar restart logic for v2raya
                time_since_last_restart=$((current_time - last_restart_time[$container_key]))
                
                if [ "${restart_attempts[$container_key]}" -ge "$WATCHDOG_MAX_RESTART_ATTEMPTS" ]; then
                    if [ "$time_since_last_restart" -lt "$WATCHDOG_RESTART_COOLDOWN" ]; then
                        watchdog_log "Container v2raya in cooldown period. Waiting..."
                        sleep "$WATCHDOG_CHECK_INTERVAL"
                        continue
                    else
                        restart_attempts[$container_key]=0
                    fi
                fi
                
                restart_attempts[$container_key]=$((restart_attempts[$container_key] + 1))
                last_restart_time[$container_key]=$current_time
                
                watchdog_log "Restart attempt ${restart_attempts[$container_key]}/$WATCHDOG_MAX_RESTART_ATTEMPTS for v2raya"
                restart_container "v2raya" "/opt/v2raya" "$debug"
                
                sleep 30
            else
                restart_attempts["v2raya"]=0
            fi
        fi
        
        # Check system resources every 5 cycles
        if [ $(($(date +%s) % 300)) -lt "$WATCHDOG_CHECK_INTERVAL" ]; then
            check_system_resources "$debug"
        fi
        
        # Cleanup every hour
        if [ $(($(date +%s) % 3600)) -lt "$WATCHDOG_CHECK_INTERVAL" ]; then
            cleanup_resources "$debug"
        fi
        
        sleep "$WATCHDOG_CHECK_INTERVAL"
    done
}

# Mark module as loaded
WATCHDOG_MODULE_LOADED=true