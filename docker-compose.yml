# Remove the version field as it's obsolete in recent Docker Compose versions

# Docker networks for security isolation
networks:
  frontend:
    # Only network exposed to the internet
    driver: bridge
    name: vpn_frontend
  vpn_services:
    # Internal network for VPN services, not internet accessible
    driver: bridge
    internal: true
    name: vpn_services
  management:
    # Internal network for administrative interfaces
    driver: bridge
    internal: true
    name: vpn_management
  backup:
    # Isolated network for backup operations
    driver: bridge
    internal: true
    name: vpn_backup

# Persistent volumes for data storage
volumes:
  traefik_data:
    name: vpn_traefik_data
  web_data:
    name: vpn_web_data
  outline_data:
    name: vpn_outline_data
  v2ray_data:
    name: vpn_v2ray_data
  management_data:
    name: vpn_management_data
  monitoring_data:
    name: vpn_monitoring_data
  backup_data:
    name: vpn_backup_data
  alertmanager_data:
    name: vpn_alertmanager_data

services:
  # Traefik - Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: vpn_traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"     # HTTP - redirected to HTTPS
      - "443:443"   # HTTPS
    networks:
      - frontend
      - management
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro,group:988  # Docker socket for auto-discovery with explicit group ID
      - traefik_data:/etc/traefik
      - ./traefik/config:/config
      - ./traefik/acme:/acme
    environment:
      - TZ=UTC
    command:
      # Traefik configuration
      - --global.sendAnonymousUsage=false
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.file.directory=/config
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --log=true
      - --log.level=INFO
    labels:
      - "traefik.enable=true"
      # Dashboard access
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOST:-traefik.example.com}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_ADMIN_AUTH:-admin:$2y$05$H1xGEQ4exd23CfGrq4Zk.eT.EpchH457Lr2ZafTyJjqM1CqhOJPNi}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Web Server - Cover service with legitimate-looking website
  web:
    image: nginx:1.25-alpine
    container_name: vpn_web
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - frontend
    volumes:
      - web_data:/usr/share/nginx/html:ro
      - ./web/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    environment:
      - TZ=UTC
    user: nginx
    read_only: true
    tmpfs:
      - /var/cache/nginx:exec,mode=1777
      - /tmp:exec,mode=1777
      - /run:exec,mode=1777
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_HOST:-www.example.com}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # OutlineVPN - Shadowsocks VPN service
  outline:
    image: shadowsocks/shadowsocks-libev:latest
    container_name: vpn_outline
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - vpn_services
      - management
    volumes:
      - outline_data:/etc/shadowsocks-libev
    environment:
      - METHOD=${SS_METHOD:-chacha20-ietf-poly1305}
      - PASSWORD=${SS_PASSWORD:-changeThisPassword}
      - TZ=UTC
    user: nobody
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.outline.rule=Host(`${OUTLINE_HOST:-outline.example.com}`) && PathPrefix(`/outline`)"
      - "traefik.http.routers.outline.entrypoints=websecure"
      - "traefik.http.routers.outline.tls.certresolver=letsencrypt"
      - "traefik.http.services.outline.loadbalancer.server.port=8388"
      - "traefik.http.routers.outline.service=outline"
    healthcheck:
      test: ["CMD", "ss-server", "-h"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s

  # V2Ray - Advanced traffic obfuscation
  v2ray:
    image: v2fly/v2fly-core:latest
    container_name: vpn_v2ray
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - vpn_services
      - management
    volumes:
      - v2ray_data:/etc/v2ray
      - ./v2ray/config.json:/etc/v2ray/config.json:ro
    environment:
      - TZ=UTC
      - V2RAY_DOMAIN=${V2RAY_DOMAIN:-v2ray.example.com}
    command:
      - run
      - -c
      - /etc/v2ray/config.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.v2ray.rule=Host(`${V2RAY_HOST:-v2ray.example.com}`)"
      - "traefik.http.routers.v2ray.entrypoints=websecure"
      - "traefik.http.routers.v2ray.tls.certresolver=letsencrypt"
      - "traefik.http.services.v2ray.loadbalancer.server.port=10086"
    healthcheck:
      test: ["CMD", "v2ray", "version"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Management Dashboard - Admin interface for VPN services
  management:
    image: nginx:alpine  # Using nginx as a replacement for the management dashboard
    container_name: vpn_management
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - management
      - vpn_services
    volumes:
      - management_data:/data
      - ./management/config.yaml:/config/config.yaml:ro
    environment:
      - TZ=UTC
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-changeThisPassword}
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx:exec,mode=1777
      - /run:exec,mode=1777
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.management.rule=Host(`${MANAGEMENT_HOST:-management.example.com}`)"
      - "traefik.http.routers.management.entrypoints=websecure"
      - "traefik.http.routers.management.tls.certresolver=letsencrypt"
      - "traefik.http.services.management.loadbalancer.server.port=80"
      - "traefik.http.routers.management.middlewares=management-auth"
      - "traefik.http.middlewares.management-auth.basicauth.users=${MANAGEMENT_ADMIN_AUTH:-admin:$2y$05$H1xGEQ4exd23CfGrq4Zk.eT.EpchH457Lr2ZafTyJjqM1CqhOJPNi}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Monitoring Service - System health with Telegram notifications
  monitoring:
    image: prom/prometheus:latest
    container_name: vpn_monitoring
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - management
      - frontend
      - vpn_services
      - backup
    volumes:
      - monitoring_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    environment:
      - TZ=UTC
    user: nobody
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring.rule=Host(`${MONITORING_HOST:-monitoring.example.com}`)"
      - "traefik.http.routers.monitoring.entrypoints=websecure"
      - "traefik.http.routers.monitoring.tls.certresolver=letsencrypt"
      - "traefik.http.services.monitoring.loadbalancer.server.port=9090"
      - "traefik.http.routers.monitoring.middlewares=monitoring-auth"
      - "traefik.http.middlewares.monitoring-auth.basicauth.users=${MONITORING_ADMIN_AUTH:-admin:$2y$05$H1xGEQ4exd23CfGrq4Zk.eT.EpchH457Lr2ZafTyJjqM1CqhOJPNi}"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Alertmanager for Telegram notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: vpn_alertmanager
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - management
      - frontend
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    environment:
      - TZ=UTC
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-your_bot_token}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-your_chat_id}
    user: 65534:65534  # Explicitly set nobody user
    command:
      - --config.file=/etc/alertmanager/config.yml
      - --storage.path=/alertmanager
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`${ALERTMANAGER_HOST:-alerts.example.com}`)"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
      - "traefik.http.routers.alertmanager.middlewares=alertmanager-auth"
      - "traefik.http.middlewares.alertmanager-auth.basicauth.users=${ALERTMANAGER_ADMIN_AUTH:-admin:$2y$05$H1xGEQ4exd23CfGrq4Zk.eT.EpchH457Lr2ZafTyJjqM1CqhOJPNi}"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vpn_grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - management
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - TZ=UTC
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-changeThisPassword}
      - GF_USERS_ALLOW_SIGN_UP=false
    user: "472"  # grafana user
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_HOST:-grafana.example.com}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backup Service - Configuration backup and disaster recovery
  backup:
    image: offen/docker-volume-backup:latest
    container_name: vpn_backup
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - backup
    volumes:
      - traefik_data:/backup/traefik_data:ro
      - outline_data:/backup/outline_data:ro
      - v2ray_data:/backup/v2ray_data:ro
      - management_data:/backup/management_data:ro
      - monitoring_data:/backup/monitoring_data:ro
      - backup_data:/archive
      - /var/run/docker.sock:/var/run/docker.sock:ro,group:988  # Docker socket with explicit group ID
    environment:
      - TZ=UTC
      - BACKUP_CRON_EXPRESSION=${BACKUP_CRON:-0 2 * * *}  # Default: Every day at 2 AM
      - BACKUP_FILENAME=vpn-backup-%Y-%m-%d_%H-%M-%S
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - BACKUP_COMPRESSION_LEVEL=9
      - BACKUP_ENCRYPTION_PASSWORD=${BACKUP_ENCRYPTION_PASSWORD:-changeThisPassword}
      - NOTIFICATION_URLS=${BACKUP_NOTIFICATION_URL:-}  # Optional webhook URL for backup notifications
    user: "1000:1000"  # Use a non-root user
    healthcheck:
      test: ["CMD", "ls", "/archive"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s