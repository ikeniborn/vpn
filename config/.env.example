# VPN Manager Environment Configuration Example
# Copy this file to .env and modify values as needed
# All variables are optional - defaults will be used if not specified

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Application name displayed in TUI and logs
# VPN_APP_NAME="VPN Manager"

# Application version (usually auto-detected)
# VPN_VERSION="2.0.0"

# Enable debug mode for verbose logging
VPN_DEBUG=false

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
VPN_LOG_LEVEL=INFO

# Default VPN protocol for new servers
# Options: vless, shadowsocks, wireguard, openvpn
VPN_DEFAULT_PROTOCOL=vless

# Automatically start VPN servers on application startup
# VPN_AUTO_START_SERVERS=true

# Enable configuration hot-reload (requires restart to take effect)
VPN_RELOAD=false

# Enable performance profiling (development only)
# VPN_PROFILE=false

# =============================================================================
# PATH CONFIGURATION
# =============================================================================

# Installation directory for VPN Manager
# VPN_PATHS__INSTALL_PATH=/opt/vpn

# Configuration files directory
# VPN_PATHS__CONFIG_PATH=~/.config/vpn-manager

# Data storage directory
# VPN_PATHS__DATA_PATH=~/.local/share/vpn-manager

# Log files directory
# VPN_PATHS__LOG_PATH=~/.local/share/vpn-manager/logs

# Template files directory (auto-detected if not specified)
# VPN_PATHS__TEMPLATE_PATH=/opt/vpn/templates

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database connection URL
# SQLite (default): sqlite:///vpn.db or sqlite+aiosqlite:///vpn.db
# PostgreSQL: postgresql://user:password@localhost:5432/vpn_db
# VPN_DATABASE__URL=sqlite+aiosqlite:///vpn.db

# Enable SQL query logging (debug mode)
# VPN_DATABASE__ECHO=false

# Database connection pool size
# VPN_DATABASE__POOL_SIZE=5

# Maximum overflow connections beyond pool size
# VPN_DATABASE__MAX_OVERFLOW=10

# Connection pool timeout in seconds
# VPN_DATABASE__POOL_TIMEOUT=30

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Docker daemon socket
# Unix socket: /var/run/docker.sock
# TCP: tcp://localhost:2376
# VPN_DOCKER__SOCKET=/var/run/docker.sock

# Docker operation timeout in seconds
# VPN_DOCKER__TIMEOUT=30

# Maximum concurrent Docker client connections
# VPN_DOCKER__MAX_CONNECTIONS=10

# Private Docker registry URL (optional)
# VPN_DOCKER__REGISTRY_URL=registry.company.com

# Private registry authentication (optional)
# VPN_DOCKER__REGISTRY_USERNAME=myuser
# VPN_DOCKER__REGISTRY_PASSWORD=mypassword

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================

# Default port range for VPN servers (min,max)
VPN_NETWORK__DEFAULT_PORT_RANGE="10000,65000"

# Enable automatic firewall rule management
# VPN_NETWORK__ENABLE_FIREWALL=true

# Create backup of firewall rules before modifications
# VPN_NETWORK__FIREWALL_BACKUP=true

# Allowed networks in CIDR notation (comma-separated)
# VPN_NETWORK__ALLOWED_NETWORKS=0.0.0.0/0

# Blocked port numbers (comma-separated)
# VPN_NETWORK__BLOCKED_PORTS=

# IP addresses for network health checks (comma-separated)
# VPN_NETWORK__HEALTH_CHECK_ENDPOINTS=8.8.8.8,1.1.1.1

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Enable authentication for API and TUI
VPN_SECURITY__ENABLE_AUTH=true

# Secret key for JWT tokens (generate a strong random key)
# VPN_SECURITY__SECRET_KEY=your-super-secret-key-here-at-least-32-chars

# Token expiration time in minutes
# VPN_SECURITY__TOKEN_EXPIRE_MINUTES=1440

# Maximum failed login attempts before lockout
# VPN_SECURITY__MAX_LOGIN_ATTEMPTS=5

# Account lockout duration in minutes
# VPN_SECURITY__LOCKOUT_DURATION=15

# Minimum password length
# VPN_SECURITY__PASSWORD_MIN_LENGTH=8

# Require complex passwords (uppercase, lowercase, numbers, symbols)
# VPN_SECURITY__REQUIRE_PASSWORD_COMPLEXITY=true

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================

# Enable metrics collection and monitoring
VPN_MONITORING__ENABLE_METRICS=true

# Port for metrics server (Prometheus-compatible)
VPN_MONITORING__METRICS_PORT=9090

# Number of days to retain metrics data
# VPN_MONITORING__METRICS_RETENTION_DAYS=30

# Health check interval in seconds
# VPN_MONITORING__HEALTH_CHECK_INTERVAL=30

# Alert thresholds (percentage)
# VPN_MONITORING__ALERT_CPU_THRESHOLD=90.0
# VPN_MONITORING__ALERT_MEMORY_THRESHOLD=90.0
# VPN_MONITORING__ALERT_DISK_THRESHOLD=85.0

# OpenTelemetry configuration (optional)
# VPN_MONITORING__ENABLE_OPENTELEMETRY=false
# VPN_MONITORING__OTLP_ENDPOINT=http://jaeger:14268/api/traces

# =============================================================================
# TUI (TERMINAL USER INTERFACE) CONFIGURATION
# =============================================================================

# Color theme: dark, light
# VPN_TUI__THEME=dark

# Screen refresh rate in seconds
# VPN_TUI__REFRESH_RATE=1

# Show system statistics in TUI
# VPN_TUI__SHOW_STATS=true

# Show help panel in TUI
# VPN_TUI__SHOW_HELP=true

# Enable mouse support in TUI
# VPN_TUI__ENABLE_MOUSE=true

# Number of items to display per page
# VPN_TUI__PAGE_SIZE=20

# Animation duration in seconds
# VPN_TUI__ANIMATION_DURATION=0.3

# =============================================================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# =============================================================================

# Development Environment
# ------------------------
# VPN_DEBUG=true
# VPN_LOG_LEVEL=DEBUG
# VPN_DATABASE__URL=sqlite:///dev.db
# VPN_DATABASE__ECHO=true
# VPN_MONITORING__ENABLE_METRICS=false
# VPN_TUI__THEME=light

# Production Environment
# -----------------------
# VPN_DEBUG=false
# VPN_LOG_LEVEL=INFO
# VPN_DATABASE__URL=postgresql://vpn:password@db:5432/vpn_prod
# VPN_SECURITY__TOKEN_EXPIRE_MINUTES=60
# VPN_MONITORING__ENABLE_METRICS=true
# VPN_MONITORING__ENABLE_OPENTELEMETRY=true
# VPN_MONITORING__OTLP_ENDPOINT=http://jaeger:14268/api/traces

# Docker Deployment
# ------------------
# VPN_PATHS__INSTALL_PATH=/app
# VPN_PATHS__CONFIG_PATH=/app/config
# VPN_PATHS__DATA_PATH=/app/data
# VPN_DATABASE__URL=postgresql://vpn:password@postgres:5432/vpn
# VPN_DOCKER__SOCKET=unix:///var/run/docker.sock

# High Security Environment
# --------------------------
# VPN_SECURITY__ENABLE_AUTH=true
# VPN_SECURITY__PASSWORD_MIN_LENGTH=12
# VPN_SECURITY__REQUIRE_PASSWORD_COMPLEXITY=true
# VPN_SECURITY__MAX_LOGIN_ATTEMPTS=3
# VPN_SECURITY__LOCKOUT_DURATION=30
# VPN_SECURITY__TOKEN_EXPIRE_MINUTES=30

# =============================================================================
# LEGACY VARIABLES (DEPRECATED - Use nested format above)
# =============================================================================

# These variables are still supported but will be removed in future versions.
# Use the VPN_*__* format instead.

# VPN_INSTALL_PATH -> VPN_PATHS__INSTALL_PATH
# VPN_CONFIG_PATH -> VPN_PATHS__CONFIG_PATH
# VPN_DATA_PATH -> VPN_PATHS__DATA_PATH
# VPN_DATABASE_URL -> VPN_DATABASE__URL
# VPN_DOCKER_SOCKET -> VPN_DOCKER__SOCKET

# =============================================================================
# USAGE NOTES
# =============================================================================

# 1. Copy this file to .env in your project root or config directory
# 2. Uncomment and modify the variables you want to override
# 3. Restart VPN Manager for changes to take effect
# 4. Use 'vpn config show' to verify your configuration
# 5. Use 'vpn config validate' to check for errors

# Environment variable hierarchy (highest to lowest priority):
# 1. Environment variables (VPN_*)
# 2. .env file
# 3. Configuration files (config.yaml/config.toml)
# 4. Default values

# For debugging configuration issues:
# VPN_DEBUG=true VPN_LOG_LEVEL=DEBUG vpn config show