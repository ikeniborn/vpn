# Dynamic configuration for HTTP/HTTPS proxy

http:
  middlewares:
    # Authentication middleware
    proxy-auth:
      forwardAuth:
        address: "http://proxy-auth:3000/auth/verify"
        authResponseHeaders:
          - "X-User-ID"
          - "X-User-Email"
          - "X-Rate-Limit"
        trustForwardHeader: true
        
    # Rate limiting middleware
    rate-limit:
      rateLimit:
        average: 100
        burst: 200
        period: 1s
        
    # Headers middleware for proxy
    proxy-headers:
      headers:
        customRequestHeaders:
          X-Forwarded-Proto: "https"
          X-Real-IP: "true"
        customResponseHeaders:
          X-Proxy-Server: "VPN-Proxy"
          X-Content-Type-Options: "nosniff"
          X-Frame-Options: "DENY"
          X-XSS-Protection: "1; mode=block"
          
    # Circuit breaker for upstream failures
    circuit-breaker:
      circuitBreaker:
        expression: "NetworkErrorRatio() > 0.30"
        
    # Retry middleware
    retry-proxy:
      retry:
        attempts: 3
        initialInterval: 100ms
        
    # Buffering for large requests
    buffering:
      buffering:
        maxRequestBodyBytes: 10485760  # 10MB
        memRequestBodyBytes: 2097152   # 2MB
        maxResponseBodyBytes: 10485760 # 10MB
        memResponseBodyBytes: 2097152  # 2MB
        retryExpression: "IsNetworkError() && Attempts() < 2"

  services:
    # HTTP Proxy Service (catch-all for external requests)
    http-proxy:
      loadBalancer:
        servers:
          - url: "http://{{.Request.Host}}"
        passHostHeader: true
        
    # HTTPS Proxy Service  
    https-proxy:
      loadBalancer:
        servers:
          - url: "https://{{.Request.Host}}"
        passHostHeader: true
        serversTransport: proxy-transport

  serversTransports:
    # Transport configuration for HTTPS proxy
    proxy-transport:
      insecureSkipVerify: false
      maxIdleConnsPerHost: 10
      forwardingTimeouts:
        dialTimeout: 30s
        responseHeaderTimeout: 30s
        idleConnTimeout: 90s
        
  routers:
    # HTTP Proxy Router
    http-proxy-router:
      entryPoints:
        - http-proxy
      rule: "PathPrefix(`/`)"
      service: http-proxy
      middlewares:
        - proxy-auth
        - rate-limit
        - proxy-headers
        - circuit-breaker
        - retry-proxy
        - buffering
      priority: 1
      
    # HTTPS Proxy Router (CONNECT method)
    https-proxy-router:
      entryPoints:
        - https-proxy
      rule: "Method(`CONNECT`)"
      service: https-proxy
      middlewares:
        - proxy-auth
        - rate-limit
        - proxy-headers
      priority: 10
      
    # Direct HTTPS requests
    https-direct-router:
      entryPoints:
        - https-proxy
      rule: "PathPrefix(`/`)"
      service: https-proxy
      middlewares:
        - proxy-auth
        - rate-limit
        - proxy-headers
        - circuit-breaker
        - retry-proxy
        - buffering
      priority: 1

# TCP configuration for raw proxy
tcp:
  routers:
    # SOCKS5 proxy router
    socks5-router:
      entryPoints:
        - socks5
      rule: "HostSNI(`*`)"
      service: vpn-socks5-proxy
      
  services:
    # SOCKS5 proxy service (handled by our Rust implementation)
    vpn-socks5-proxy:
      loadBalancer:
        servers:
          - address: "vpn-proxy:1080"