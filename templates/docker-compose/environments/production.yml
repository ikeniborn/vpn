# Production Environment Configuration
# Highly available, secure, and optimized for production workloads

version: '3.8'

services:
  # Production VPN server with HA configuration
  vpn-server:
    image: ${VPN_IMAGE_TAG:-latest}
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=warning
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - ENABLE_AUDIT_LOG=true
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.labels.zone
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    secrets:
      - vpn_server_key
      - vpn_tls_cert
      - vpn_tls_key
    networks:
      - vpn-network
      - monitoring-network

  # Production PostgreSQL with HA
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD_FILE=/run/secrets/replication_password
      - POSTGRES_SYNCHRONOUS_COMMIT=on
      - POSTGRES_MAX_CONNECTIONS=200
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./configs/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    deploy:
      placement:
        constraints:
          - node.labels.db == primary
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    secrets:
      - postgres_password
      - replication_password
    networks:
      - vpn-network

  # PostgreSQL read replicas
  postgres-replica1:
    image: postgres:15-alpine
    environment:
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_MASTER_HOST=postgres
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD_FILE=/run/secrets/replication_password
    volumes:
      - postgres-replica1-data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.labels.zone == zone-a
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    secrets:
      - replication_password
    networks:
      - vpn-network

  postgres-replica2:
    image: postgres:15-alpine
    environment:
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_MASTER_HOST=postgres
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD_FILE=/run/secrets/replication_password
    volumes:
      - postgres-replica2-data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.labels.zone == zone-b
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    secrets:
      - replication_password
    networks:
      - vpn-network

  # Redis cluster for sessions
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --requirepass-file /run/secrets/redis_password
      --tcp-backlog 511
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-data:/data
    deploy:
      mode: replicated
      replicas: 3
      placement:
        preferences:
          - spread: node.labels.zone
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    secrets:
      - redis_password
    networks:
      - vpn-network

  # Production Traefik with HA
  traefik:
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
    secrets:
      - traefik_acme_email
      - cloudflare_api_token

  # Production monitoring
  prometheus:
    deploy:
      placement:
        constraints:
          - node.labels.monitoring == true
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    volumes:
      - prometheus-data:/prometheus
    networks:
      - monitoring-network

  grafana:
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_SERVER_ROOT_URL=https://grafana.vpn.example.com
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD_FILE=/run/secrets/grafana_db_password
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    secrets:
      - grafana_password
      - grafana_db_password
    networks:
      - vpn-network
      - monitoring-network

# Production volumes
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: nfs
      o: addr=nfs.example.com,rw,vers=4,hard,timeo=600,rsize=1048576,wsize=1048576
      device: ":/export/vpn/postgres"
  postgres-replica1-data:
    driver: local
  postgres-replica2-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local

# Production secrets
secrets:
  postgres_password:
    external: true
  replication_password:
    external: true
  redis_password:
    external: true
  grafana_password:
    external: true
  grafana_db_password:
    external: true
  vpn_server_key:
    external: true
  vpn_tls_cert:
    external: true
  vpn_tls_key:
    external: true
  traefik_acme_email:
    external: true
  cloudflare_api_token:
    external: true

# Production networks
networks:
  vpn-network:
    driver: overlay
    attachable: false
    encrypted: true
    ipam:
      config:
        - subnet: 10.0.0.0/16
  monitoring-network:
    driver: overlay
    attachable: false
    ipam:
      config:
        - subnet: 10.0.16.0/20