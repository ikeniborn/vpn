# Staging Environment Override
# Use with: docker-compose -f base.yml -f staging.yml up
version: '3.8'

services:
  vpn-server:
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      resources:
        limits:
          memory: 384M
          cpus: '0.4'
        reservations:
          memory: 192M
          cpus: '0.2'
    environment:
      - XRAY_LOG_LEVEL=info
      - STAGING=true
      - ENVIRONMENT=staging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx-proxy:
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 192M
          cpus: '0.2'
        reservations:
          memory: 96M
          cpus: '0.1'
    environment:
      - NGINX_WORKER_PROCESSES=2
      - NGINX_WORKER_CONNECTIONS=512
    volumes:
      - ./configs/nginx/staging:/etc/nginx/conf.d:ro
      - nginx-certs:/etc/nginx/certs:ro
      - ./ssl/staging:/etc/ssl/certs:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  vpn-api:
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 384M
          cpus: '0.4'
        reservations:
          memory: 192M
          cpus: '0.2'
    environment:
      - NODE_ENV=staging
      - LOG_LEVEL=info
      - API_RATE_LIMIT=200
      - API_TIMEOUT=20000
      - STAGING=true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 768M
          cpus: '0.75'
        reservations:
          memory: 384M
          cpus: '0.4'
    environment:
      - POSTGRES_MAX_CONNECTIONS=75
      - POSTGRES_SHARED_BUFFERS=192MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=768MB
      - POSTGRES_WORK_MEM=3MB
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=100
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups/staging:/backups:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "5433:5432"  # Expose for testing on different port

  redis:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 192M
          cpus: '0.2'
        reservations:
          memory: 96M
          cpus: '0.1'
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-changepassword}
      --maxmemory 150mb
      --maxmemory-policy allkeys-lru
      --save 300 10
      --save 60 1000
      --loglevel notice
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "6380:6379"  # Expose for testing on different port

  prometheus:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 384M
          cpus: '0.4'
        reservations:
          memory: 192M
          cpus: '0.2'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 192M
          cpus: '0.2'
        reservations:
          memory: 96M
          cpus: '0.1'
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_SERVER_ROOT_URL=https://staging-grafana.${DOMAIN_NAME}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  jaeger:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 384M
          cpus: '0.4'
        reservations:
          memory: 192M
          cpus: '0.2'
    environment:
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=5000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Staging-specific services
  smoke-tests:
    image: node:18-alpine
    container_name: vpn-smoke-tests
    restart: "no"
    environment:
      - API_URL=http://vpn-api:3000
      - VPN_SERVER_URL=http://vpn-server:8080
      - ENVIRONMENT=staging
    volumes:
      - ./tests/smoke:/app/tests:ro
      - ./scripts/smoke-tests.sh:/smoke-tests.sh:ro
    command: ["/smoke-tests.sh"]
    networks:
      - vpn-network
      - vpn-internal
    depends_on:
      - vpn-api
      - vpn-server
    profiles:
      - testing

  load-tester:
    image: grafana/k6:latest
    container_name: vpn-load-tester
    restart: "no"
    environment:
      - K6_VUS=10
      - K6_DURATION=5m
      - API_URL=http://vpn-api:3000
    volumes:
      - ./tests/load:/scripts:ro
    command: ["run", "/scripts/load-test.js"]
    networks:
      - vpn-network
    depends_on:
      - vpn-api
    profiles:
      - testing

# Staging-specific volumes
volumes:
  staging-data:
    driver: local
  test-results:
    driver: local