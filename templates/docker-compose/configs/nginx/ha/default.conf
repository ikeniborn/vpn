# Nginx HA Configuration with Health Checks and Load Balancing

# Upstream configuration for VPN API with health checks
upstream vpn_api {
    # Use least connections for better distribution
    least_conn;
    
    # Enable keepalive connections
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
    
    # Dynamic server resolution
    server vpn-api:3000 max_fails=3 fail_timeout=30s;
    
    # Backup servers (will be used only if all primary servers are down)
    server vpn-api-backup:3000 backup max_fails=3 fail_timeout=30s;
    
    # Enable active health checks (requires nginx_upstream_check_module)
    # check interval=5000 rise=2 fall=3 timeout=3000 type=http;
    # check_http_send "GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n";
    # check_http_expect_alive http_2xx http_3xx;
}

# Upstream for VPN load balancer
upstream vpn_lb {
    least_conn;
    server vpn-lb:8443 max_fails=2 fail_timeout=10s;
    keepalive 16;
}

# Upstream for monitoring services
upstream prometheus {
    server prometheus:9090 max_fails=3 fail_timeout=30s;
    keepalive 8;
}

upstream grafana {
    least_conn;
    server grafana:3000 max_fails=3 fail_timeout=30s;
    keepalive 8;
}

# Rate limiting zones with increased size for HA
limit_req_zone $binary_remote_addr zone=api_limit:20m rate=30r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;
limit_req_zone $server_name zone=server_limit:10m rate=1000r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Cache zones for better performance
proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=1g inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=1g inactive=24h use_temp_path=off;

# Main server block
server {
    listen 80;
    server_name ${NGINX_HOST} *.${NGINX_HOST};
    
    # Redirect to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name ${NGINX_HOST};

    # SSL configuration
    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Connection limiting
    limit_conn conn_limit 100;
    
    # Logging
    access_log /var/log/nginx/ha_access.log combined buffer=16k flush=5s;
    error_log /var/log/nginx/ha_error.log warn;

    # VPN Server access (proxied through HAProxy)
    location /vpn/ {
        proxy_pass https://vpn_lb;
        proxy_http_version 1.1;
        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1.2 TLSv1.3;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long connections
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Disable buffering for streaming
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # API endpoints with caching
    location /api/ {
        limit_req zone=api_limit burst=50 nodelay;
        limit_req_status 429;
        
        # Cache configuration
        proxy_cache api_cache;
        proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
        proxy_cache_valid 200 201 204 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
        
        proxy_pass http://vpn_api/;
        proxy_http_version 1.1;
        
        # Connection reuse
        proxy_set_header Connection "";
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 30s;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Request-ID" always;
        add_header Access-Control-Max-Age "3600" always;
        
        # Add cache status header
        add_header X-Cache-Status $upstream_cache_status always;
    }

    # Authentication endpoints (stricter rate limiting, no caching)
    location /api/auth/ {
        limit_req zone=auth_limit burst=20 nodelay;
        limit_req_status 429;
        
        proxy_pass http://vpn_api/auth/;
        proxy_http_version 1.1;
        
        # No caching for auth endpoints
        proxy_cache_bypass 1;
        proxy_no_cache 1;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Shorter timeouts for auth
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Health check endpoint (no rate limiting)
    location /health {
        access_log off;
        
        # Check all upstreams
        content_by_lua_block {
            local upstreams = {"vpn_api", "vpn_lb", "prometheus", "grafana"}
            local all_healthy = true
            local status = {}
            
            for _, upstream in ipairs(upstreams) do
                -- This would require lua-nginx-module
                -- Just return OK for now
                status[upstream] = "healthy"
            end
            
            ngx.status = 200
            ngx.header.content_type = "application/json"
            ngx.say('{"status":"healthy","upstreams":' .. cjson.encode(status) .. '}')
        }
        
        # Fallback
        default_type text/plain;
        return 200 "OK\n";
    }

    # Metrics endpoint (internal only)
    location /metrics {
        allow 172.20.0.0/16;
        allow 172.21.0.0/16;
        deny all;
        
        proxy_pass http://vpn_api/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    # Static files with caching
    location /static/ {
        proxy_cache static_cache;
        proxy_cache_valid 200 301 302 24h;
        proxy_cache_valid 404 1h;
        
        alias /var/www/static/;
        expires 1d;
        add_header Cache-Control "public, immutable";
        
        # Gzip compression
        gzip on;
        gzip_types text/css application/javascript image/svg+xml;
        gzip_vary on;
    }

    # WebSocket support
    location /ws/ {
        proxy_pass http://vpn_api/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Default location
    location / {
        root /var/www/html;
        try_files $uri $uri/ /index.html;
        
        # Security headers for static content
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
}

# Monitoring endpoints
server {
    listen 443 ssl http2;
    server_name prometheus.${NGINX_HOST};

    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;

    # Basic auth for Prometheus
    auth_basic "Prometheus Access";
    auth_basic_user_file /etc/nginx/.htpasswd_prometheus;

    location / {
        proxy_pass http://prometheus;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 443 ssl http2;
    server_name grafana.${NGINX_HOST};

    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;

    location / {
        proxy_pass http://grafana;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# WebSocket connection upgrade map
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}