# VPN System - Base Docker Compose Configuration
# Generated by vpn-compose orchestration system
version: '3.8'

networks:
  vpn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  vpn-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  vpn-data:
    driver: local
  vpn-config:
    driver: local
  vpn-logs:
    driver: local
  nginx-certs:
    driver: local
  postgres-data:
    driver: local

services:
  # VPN Server (Xray with VLESS+Reality)
  vpn-server:
    image: ghcr.io/xtls/xray-core:latest
    container_name: vpn-server
    restart: unless-stopped
    ports:
      - "${VPN_PORT:-8443}:8443"
      - "${VPN_REALITY_PORT:-443}:443"
    volumes:
      - vpn-config:/etc/xray
      - vpn-logs:/var/log/xray
      - ./configs/xray:/etc/xray/configs:ro
    environment:
      - XRAY_VMESS_ALTID=0
      - XRAY_LOG_LEVEL=${LOG_LEVEL:-warning}
    networks:
      vpn-network:
        ipv4_address: 172.20.0.10
      vpn-internal:
        ipv4_address: 172.21.0.10
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    depends_on:
      - postgres
      - redis

  # Nginx Reverse Proxy with SSL Termination
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./configs/nginx:/etc/nginx/conf.d:ro
      - nginx-certs:/etc/nginx/certs:ro
      - vpn-logs:/var/log/nginx
    environment:
      - NGINX_HOST=${DOMAIN_NAME:-vpn.example.com}
      - NGINX_PORT=80
    networks:
      vpn-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    depends_on:
      - vpn-server

  # PostgreSQL Database for User Management
  postgres:
    image: postgres:15-alpine
    container_name: vpn-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vpndb}
      - POSTGRES_USER=${POSTGRES_USER:-vpnuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changepassword}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./configs/postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      vpn-internal:
        ipv4_address: 172.21.0.30
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Redis for Session Storage and Caching
  redis:
    image: redis:7-alpine
    container_name: vpn-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changepassword}
    volumes:
      - ./configs/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      vpn-internal:
        ipv4_address: 172.21.0.40
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a $${REDIS_PASSWORD:-changepassword} ping | grep PONG"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID

  # VPN Management API
  vpn-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: vpn-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-vpnuser}:${POSTGRES_PASSWORD:-changepassword}@postgres:5432/${POSTGRES_DB:-vpndb}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changepassword}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-changethissecret}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - VPN_SERVER_URL=http://vpn-server:8080
    volumes:
      - vpn-config:/app/config
      - vpn-logs:/app/logs
    networks:
      vpn-network:
        ipv4_address: 172.20.0.50
      vpn-internal:
        ipv4_address: 172.21.0.50
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    depends_on:
      - postgres
      - redis
      - vpn-server

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: vpn-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./configs/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      vpn-internal:
        ipv4_address: 172.21.0.60
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: vpn-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - ./configs/grafana:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    networks:
      vpn-internal:
        ipv4_address: 172.21.0.70
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    depends_on:
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: vpn-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      vpn-internal:
        ipv4_address: 172.21.0.80
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:16686/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

# Additional volumes for monitoring stack
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local