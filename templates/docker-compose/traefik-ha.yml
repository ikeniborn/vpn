version: '3.8'

# High Availability VPN Stack with Traefik Load Balancing
# This configuration provides multi-instance deployments with shared state

services:
  # Consul Cluster for Service Discovery and Shared State
  consul-1:
    image: consul:latest
    container_name: consul-1
    restart: unless-stopped
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    command: >
      consul agent -server -bootstrap-expect=3 -datacenter=vpn-dc
      -data-dir=/consul/data -node=consul-1 -bind={{ GetInterfaceIP "eth0" }}
      -client=0.0.0.0 -retry-join=consul-2 -retry-join=consul-3
      -ui-config-enabled=true -connect-enabled=true
    volumes:
      - consul-1-data:/consul/data
      - ./configs/consul:/consul/config:ro
    networks:
      - vpn-network
    ports:
      - "8500:8500"  # HTTP API
      - "8600:8600/udp"  # DNS
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  consul-2:
    image: consul:latest
    container_name: consul-2
    restart: unless-stopped
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    command: >
      consul agent -server -datacenter=vpn-dc -data-dir=/consul/data
      -node=consul-2 -bind={{ GetInterfaceIP "eth0" }} -client=0.0.0.0
      -retry-join=consul-1 -retry-join=consul-3
    volumes:
      - consul-2-data:/consul/data
      - ./configs/consul:/consul/config:ro
    networks:
      - vpn-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  consul-3:
    image: consul:latest
    container_name: consul-3
    restart: unless-stopped
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    command: >
      consul agent -server -datacenter=vpn-dc -data-dir=/consul/data
      -node=consul-3 -bind={{ GetInterfaceIP "eth0" }} -client=0.0.0.0
      -retry-join=consul-1 -retry-join=consul-2
    volumes:
      - consul-3-data:/consul/data
      - ./configs/consul:/consul/config:ro
    networks:
      - vpn-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Traefik Load Balancer Cluster
  traefik-1:
    image: traefik:v3.0
    container_name: traefik-1
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"   # Dashboard
      - "8443:8443"   # VPN port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/traefik/traefik-ha.yml:/etc/traefik/traefik.yml:ro
      - ./configs/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik-logs:/var/log/traefik
    environment:
      - TRAEFIK_INSTANCE_ID=traefik-1
      - TRAEFIK_CLUSTER_NAME=vpn-cluster
      - CONSUL_TRAEFIK_PASSWORD=${CONSUL_TRAEFIK_PASSWORD:-traefik}
    depends_on:
      consul-1:
        condition: service_healthy
      consul-2:
        condition: service_healthy
      consul-3:
        condition: service_healthy
    networks:
      - vpn-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-1.rule=Host(`traefik.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.traefik-1.entrypoints=websecure"
      - "traefik.http.routers.traefik-1.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-1.service=api@internal"
      - "traefik.http.routers.traefik-1.middlewares=admin-auth"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  traefik-2:
    image: traefik:v3.0
    container_name: traefik-2
    restart: unless-stopped
    ports:
      - "8081:8080"   # Dashboard on different port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/traefik/traefik-ha.yml:/etc/traefik/traefik.yml:ro
      - ./configs/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik-logs:/var/log/traefik
    environment:
      - TRAEFIK_INSTANCE_ID=traefik-2
      - TRAEFIK_CLUSTER_NAME=vpn-cluster
      - CONSUL_TRAEFIK_PASSWORD=${CONSUL_TRAEFIK_PASSWORD:-traefik}
    depends_on:
      consul-1:
        condition: service_healthy
      consul-2:
        condition: service_healthy
      consul-3:
        condition: service_healthy
    networks:
      - vpn-network
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # VPN Server Cluster
  vpn-server-1:
    image: ghcr.io/xtls/xray-core:latest
    container_name: vpn-server-1
    restart: unless-stopped
    volumes:
      - vpn-config-1:/etc/xray
      - vpn-logs:/var/log/xray
      - ./configs/xray:/etc/xray/configs:ro
    environment:
      - XRAY_VMESS_ALTID=0
      - XRAY_LOG_LEVEL=${LOG_LEVEL:-warning}
      - XRAY_INSTANCE_ID=vpn-server-1
    depends_on:
      - postgres-primary
      - redis-sentinel-1
    networks:
      - vpn-network
      - vpn-internal
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.vpn-xray.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.vpn-xray.entrypoints=vpn-xray"
      - "traefik.tcp.routers.vpn-xray.service=vpn-xray"
      - "traefik.tcp.services.vpn-xray.loadbalancer.server.port=8443"
      - "traefik.tcp.services.vpn-xray.loadbalancer.sticky.cookie=true"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  vpn-server-2:
    image: ghcr.io/xtls/xray-core:latest
    container_name: vpn-server-2
    restart: unless-stopped
    volumes:
      - vpn-config-2:/etc/xray
      - vpn-logs:/var/log/xray
      - ./configs/xray:/etc/xray/configs:ro
    environment:
      - XRAY_VMESS_ALTID=0
      - XRAY_LOG_LEVEL=${LOG_LEVEL:-warning}
      - XRAY_INSTANCE_ID=vpn-server-2
    depends_on:
      - postgres-primary
      - redis-sentinel-1
    networks:
      - vpn-network
      - vpn-internal
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.vpn-xray.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.vpn-xray.entrypoints=vpn-xray"
      - "traefik.tcp.routers.vpn-xray.service=vpn-xray"
      - "traefik.tcp.services.vpn-xray.loadbalancer.server.port=8443"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Identity Service Cluster
  vpn-identity-1:
    image: vpn-identity:latest
    container_name: vpn-identity-1
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://vpn:${POSTGRES_PASSWORD:-vpn}@postgres-primary:5432/vpn_identity
      - REDIS_URL=redis://redis-sentinel-1:26379
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - RUST_LOG=info,vpn_identity=debug
      - INSTANCE_ID=vpn-identity-1
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-sentinel-1:
        condition: service_healthy
    networks:
      - vpn-network
    volumes:
      - ./configs/identity:/etc/vpn-identity:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vpn-identity.rule=Host(`auth.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.vpn-identity.entrypoints=websecure"
      - "traefik.http.routers.vpn-identity.tls.certresolver=letsencrypt"
      - "traefik.http.services.vpn-identity.loadbalancer.server.port=8080"
      - "traefik.http.routers.vpn-identity.middlewares=default-middlewares"
      - "traefik.http.services.vpn-identity.loadbalancer.sticky.cookie.name=auth_session"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  vpn-identity-2:
    image: vpn-identity:latest
    container_name: vpn-identity-2
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://vpn:${POSTGRES_PASSWORD:-vpn}@postgres-primary:5432/vpn_identity
      - REDIS_URL=redis://redis-sentinel-1:26379
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - RUST_LOG=info,vpn_identity=debug
      - INSTANCE_ID=vpn-identity-2
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-sentinel-1:
        condition: service_healthy
    networks:
      - vpn-network
    volumes:
      - ./configs/identity:/etc/vpn-identity:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vpn-identity.rule=Host(`auth.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.vpn-identity.entrypoints=websecure"
      - "traefik.http.routers.vpn-identity.tls.certresolver=letsencrypt"
      - "traefik.http.services.vpn-identity.loadbalancer.server.port=8080"
      - "traefik.http.routers.vpn-identity.middlewares=default-middlewares"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Primary-Replica Setup
  postgres-primary:
    image: postgres:16-alpine
    container_name: postgres-primary
    restart: unless-stopped
    environment:
      - POSTGRES_USER=vpn
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vpn}
      - POSTGRES_DB=vpn_identity
      - POSTGRES_REPLICATION_USER=replica
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD:-replica}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./configs/postgres/primary:/docker-entrypoint-initdb.d:ro
    networks:
      - vpn-network
    command: |
      postgres -c wal_level=replica
               -c max_wal_senders=3
               -c max_replication_slots=3
               -c hot_standby=on
               -c archive_mode=on
               -c archive_command='test ! -f /var/lib/postgresql/archive/%f && cp %p /var/lib/postgresql/archive/%f'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vpn -d vpn_identity"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-replica:
    image: postgres:16-alpine
    container_name: postgres-replica
    restart: unless-stopped
    environment:
      - PGUSER=replica
      - POSTGRES_PASSWORD=${POSTGRES_REPLICATION_PASSWORD:-replica}
      - POSTGRES_MASTER_SERVICE=postgres-primary
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    networks:
      - vpn-network
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data --host=postgres-primary --username=replica --verbose --progress --write-recovery-conf --wal-method=stream
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres -c hot_standby=on"
    depends_on:
      postgres-primary:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U replica"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Sentinel Cluster
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vpn}
    volumes:
      - redis-master-data:/data
    networks:
      - vpn-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-sentinel-1:
    image: redis:7-alpine
    container_name: redis-sentinel-1
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf --sentinel
    volumes:
      - ./configs/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
    networks:
      - vpn-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-sentinel-2:
    image: redis:7-alpine
    container_name: redis-sentinel-2
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf --sentinel
    volumes:
      - ./configs/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
    networks:
      - vpn-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-sentinel-3:
    image: redis:7-alpine
    container_name: redis-sentinel-3
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf --sentinel
    volumes:
      - ./configs/redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
    networks:
      - vpn-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: vpn-prometheus
    restart: unless-stopped
    volumes:
      - ./configs/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vpn-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=admin-auth"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  grafana:
    image: grafana/grafana:latest
    container_name: vpn-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - ./configs/grafana:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - vpn-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=default-middlewares"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  consul-1-data:
  consul-2-data:
  consul-3-data:
  traefik-logs:
  vpn-config-1:
  vpn-config-2:
  vpn-logs:
  postgres-primary-data:
  postgres-replica-data:
  redis-master-data:
  prometheus-data:
  grafana-data:

networks:
  vpn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  vpn-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16