version: '3.8'

services:
  # Traefik reverse proxy with automatic SSL
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"   # Dashboard
      - "8443:8443"   # VPN/Xray port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./configs/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik-acme:/etc/traefik/acme.json
      - traefik-logs:/var/log/traefik
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=false
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL:-admin@vpn.local}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/etc/traefik/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web
    networks:
      - vpn-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=admin-auth"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # VPN Server (Xray-core)
  vpn-server:
    image: ghcr.io/xtls/xray-core:latest
    container_name: vpn-server
    restart: unless-stopped
    volumes:
      - vpn-config:/etc/xray
      - vpn-logs:/var/log/xray
      - ./configs/xray:/etc/xray/configs:ro
    environment:
      - XRAY_VMESS_ALTID=0
      - XRAY_LOG_LEVEL=${LOG_LEVEL:-warning}
    depends_on:
      - postgres
      - redis
    networks:
      - vpn-network
      - vpn-internal
    labels:
      - "traefik.enable=true"
      # TCP router for VPN traffic
      - "traefik.tcp.routers.vpn-xray.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.vpn-xray.entrypoints=vpn-xray"
      - "traefik.tcp.routers.vpn-xray.service=vpn-xray"
      - "traefik.tcp.services.vpn-xray.loadbalancer.server.port=8443"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Identity and Authentication Service
  vpn-identity:
    image: vpn-identity:latest
    container_name: vpn-identity
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://vpn:${POSTGRES_PASSWORD:-vpn}@postgres-identity:5432/vpn_identity
      - REDIS_URL=redis://redis-identity:6379
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - RUST_LOG=info,vpn_identity=debug
    depends_on:
      postgres-identity:
        condition: service_healthy
      redis-identity:
        condition: service_healthy
    networks:
      - vpn-network
    volumes:
      - ./configs/identity:/etc/vpn-identity:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vpn-identity.rule=Host(`auth.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.vpn-identity.entrypoints=websecure"
      - "traefik.http.routers.vpn-identity.tls.certresolver=letsencrypt"
      - "traefik.http.services.vpn-identity.loadbalancer.server.port=8080"
      - "traefik.http.routers.vpn-identity.middlewares=default-middlewares"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL for Identity Service
  postgres-identity:
    image: postgres:16-alpine
    container_name: postgres-identity
    restart: unless-stopped
    environment:
      - POSTGRES_USER=vpn
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-vpn}
      - POSTGRES_DB=vpn_identity
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-identity-data:/var/lib/postgresql/data
      - ./configs/postgres/identity-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - vpn-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vpn -d vpn_identity"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Sessions
  redis-identity:
    image: redis:7-alpine
    container_name: redis-identity
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vpn}
    volumes:
      - redis-identity-data:/data
    networks:
      - vpn-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vpn-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vpndb}
      - POSTGRES_USER=${POSTGRES_USER:-vpnuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changepassword}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./configs/postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - vpn-internal
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: vpn-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changepassword}
    volumes:
      - redis-data:/data
    networks:
      - vpn-internal
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: vpn-prometheus
    restart: unless-stopped
    volumes:
      - ./configs/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vpn-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=admin-auth"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vpn-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./configs/grafana:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - vpn-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=default-middlewares"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: vpn-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - vpn-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.${DOMAIN_NAME:-vpn.local}`)"
      - "traefik.http.routers.jaeger.entrypoints=websecure"
      - "traefik.http.routers.jaeger.tls.certresolver=letsencrypt"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
      - "traefik.http.routers.jaeger.middlewares=admin-auth"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  traefik-acme:
  traefik-logs:
  vpn-config:
  vpn-logs:
  postgres-identity-data:
  redis-identity-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  vpn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  vpn-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16